<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!-- saved from url=(0021)http://codeofrob.com/ -->
<HTML xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en"><HEAD><META http-equiv="Content-Type" content="text/html; charset=UTF-8"><TITLE>
	Rob Ashton
</TITLE>
<META content="Rob Ashton&#39;s blog - talk of .NET, Databases, Web development and general workplace gripes" name="description">
<META content="Rob Ashton, ASP.NET, MVC, .NET, C#, VB.NET, NHibernate, Development" name="keywords">
<META name="author" content="Rob Ashton">
<META name="Generator" content="Subtext Version 2.1.2.2">
<LINK id="RSSLink" title="RSS" type="application/rss+xml" rel="alternate" href="http://feeds.feedburner.com/RobAshton?format=xml">
<LINK type="text/css" rel="stylesheet" href="./Rob Ashton_files/css.axd">
<LINK id="CustomCss" type="text/css" rel="stylesheet" href="./Rob Ashton_files/customcss.aspx"><LINK id="Rsd" rel="EditURI" type="application/rsd+xml" title="RSD" href="http://blog.codeofrob.com/rsd.xml.ashx"><LINK id="AtomLink" title="RSS" type="application/rss+xml" rel="alternate" href="http://feeds.feedburner.com/RobAshton?format=xml">
		<SCRIPT type="text/javascript" src="./Rob Ashton_files/common.js"></SCRIPT>
		<SCRIPT type="text/javascript">
			var subtextAllowedHtmlTags = ['a', 'b', 'strong', 'blockquote', 'p', 'i', 'em', 'u', 'strike', 'super', 'sub', 'code'];
			var subtextBlogInfo = new blogInfo('/', '/');
		</SCRIPT>
		<SCRIPT type="text/javascript" src="./Rob Ashton_files/shCore.js"></SCRIPT>
<SCRIPT type="text/javascript" src="./Rob Ashton_files/shBrushCpp.js"></SCRIPT>
<SCRIPT type="text/javascript" src="./Rob Ashton_files/shBrushCSharp.js"></SCRIPT>
<SCRIPT type="text/javascript" src="./Rob Ashton_files/shBrushJScript.js"></SCRIPT>
<SCRIPT type="text/javascript" src="./Rob Ashton_files/shBrushPython.js"></SCRIPT>
<SCRIPT type="text/javascript" src="./Rob Ashton_files/shBrushSql.js"></SCRIPT>
<SCRIPT type="text/javascript" src="./Rob Ashton_files/shBrushVb.js"></SCRIPT>
<SCRIPT type="text/javascript" src="./Rob Ashton_files/shBrushXml.js"></SCRIPT>
<SCRIPT type="text/javascript" src="./Rob Ashton_files/jquery-1.2.6.min.js"></SCRIPT>
<LINK rel="openid.server" href="http://www.myopenid.com/server"><LINK rel="openid.delegate" href="http://robashton.codeofrob.com/"></HEAD><BODY>
		<FORM name="Form1" method="post" action="http://codeofrob.com/default.aspx" id="Form1">
<DIV>
<INPUT type="hidden" name="__EVENTTARGET" id="__EVENTTARGET" value="">
<INPUT type="hidden" name="__EVENTARGUMENT" id="__EVENTARGUMENT" value="">
<INPUT type="hidden" name="__VIEWSTATE" id="
__VIEWSTATE" value="">
</DIV>

<SCRIPT type="text/javascript">
//<![CDATA[
var theForm = document.forms['Form1'];
if (!theForm) {
    theForm = document.Form1;
}
function __doPostBack(eventTarget, eventArgument) {
    if (!theForm.onsubmit || (theForm.onsubmit() != false)) {
        theForm.__EVENTTARGET.value = eventTarget;
        theForm.__EVENTARGUMENT.value = eventArgument;
        theForm.submit();
    }
}
//]]>
</SCRIPT>


<SCRIPT src="./Rob Ashton_files/WebResource.axd" type="text/javascript"></SCRIPT>


<SCRIPT src="./Rob Ashton_files/ScriptResource.axd" type="text/javascript"></SCRIPT>
<SCRIPT src="./Rob Ashton_files/ScriptResource(1).axd" type="text/javascript"></SCRIPT>
<DIV>

	<INPUT type="hidden" name="__EVENTVALIDATION" id="__EVENTVALIDATION" value="/wEWAwL+raDpAgKoztmjBAKB4tugBWCJQdIg4QiprnCI2YKvW9GU9eJT">
</DIV>
            <SCRIPT type="text/javascript">
//<![CDATA[
Sys.WebForms.PageRequestManager._initialize('SubtextScriptManager', document.getElementById('Form1'));
Sys.WebForms.PageRequestManager.getInstance()._updateControls(['tSearch$searchUpdate'], ['Search$btnSearch'], [], 90);
//]]>
</SCRIPT>

			
<DIV id="main">
	<DIV id="header">
		
<SPAN id="logo"></SPAN>
<H1><A id="Header1_HeaderTitle" title="The Title Of This Blog." class="headermaintitle" href="http://codeofrob.com/Default.aspx">Rob Ashton</A></H1>
<P id="tagline">If we object orient and service orient everything into the cloud, we'll be completely flexible!</P>
	</DIV>
	
	

<UL id="menu" class="horizontal">
	<LI><A id="MyLinks1_HomeLink" title="Link to the home page." class="active" href="http://codeofrob.com/Default.aspx">Home</A></LI>
	<LI><A id="MyLinks1_Archives" title="View Archives." href="http://codeofrob.com/archives.aspx">Archives</A></LI>
	<LI><A id="MyLinks1_ContactLink" title="Contact form." href="http://codeofrob.com/contact.aspx">Contact</A></LI>
	<LI><A id="MyLinks1_Syndication" title="Subscribe to this feed." href="http://feeds.feedburner.com/RobAshton?format=xml">Syndication</A></LI>
	<LI><A id="MyLinks1_Admin" title="Login Form." href="http://codeofrob.com/login.aspx">Login</A></LI>
</UL>
	
	<DIV id="sidebar">
		
			
			
<DIV id="search">
	<DIV id="Search_searchProgress" style="display:none;">
	
			<DIV id="search-progress">
			</DIV>
		
</DIV>
	<DIV id="search-box">
		<INPUT name="Search$txtSearch" type="text" id="Search_txtSearch" class="searchterm"> <INPUT type="submit" name="Search$btnSearch" value="Search" id="Search_btnSearch" class="searchButton">
	</DIV>
	<DIV id="Search_searchUpdate">
	
			
		
</DIV>
</DIV>
			<!-- 
<div>
	<h2>Tag Cloud</h2>
	
				<ul id="tag-cloud">
		
			<li>
				<a id="tagCloud_Tags_ctl01_TagUrl" title=".NET (1)" class="tag-style-1 tag-item" href="http://blog.codeofrob.com/Tags/.NET/default.aspx">.NET</a>
			</li>
		
			<li>
				<a id="tagCloud_Tags_ctl02_TagUrl" title=".NET Runtime (1)" class="tag-style-1 tag-item" href="http://blog.codeofrob.com/Tags/.NET%20Runtime/default.aspx">.NET Runtime</a>
			</li>
		
			<li>
				<a id="tagCloud_Tags_ctl03_TagUrl" title="ASP (1)" class="tag-style-1 tag-item" href="http://blog.codeofrob.com/Tags/ASP/default.aspx">ASP</a>
			</li>
		
			<li>
				<a id="tagCloud_Tags_ctl04_TagUrl" title="ASP.NET (2)" class="tag-style-7 tag-item" href="http://blog.codeofrob.com/Tags/ASP.NET/default.aspx">ASP.NET</a>
			</li>
		
			<li>
				<a id="tagCloud_Tags_ctl05_TagUrl" title="ASP.NET MVC (1)" class="tag-style-1 tag-item" href="http://blog.codeofrob.com/Tags/ASP.NET%20MVC/default.aspx">ASP.NET MVC</a>
			</li>
		
			<li>
				<a id="tagCloud_Tags_ctl06_TagUrl" title="COM (1)" class="tag-style-1 tag-item" href="http://blog.codeofrob.com/Tags/COM/default.aspx">COM</a>
			</li>
		
			<li>
				<a id="tagCloud_Tags_ctl07_TagUrl" title="Introduction (1)" class="tag-style-1 tag-item" href="http://blog.codeofrob.com/Tags/Introduction/default.aspx">Introduction</a>
			</li>
		
			<li>
				<a id="tagCloud_Tags_ctl08_TagUrl" title="Linq (1)" class="tag-style-1 tag-item" href="http://blog.codeofrob.com/Tags/Linq/default.aspx">Linq</a>
			</li>
		
			<li>
				<a id="tagCloud_Tags_ctl09_TagUrl" title="Linq2NHibernate (1)" class="tag-style-1 tag-item" href="http://blog.codeofrob.com/Tags/Linq2NHibernate/default.aspx">Linq2NHibernate</a>
			</li>
		
			<li>
				<a id="tagCloud_Tags_ctl10_TagUrl" title="Master Pages (1)" class="tag-style-1 tag-item" href="http://blog.codeofrob.com/Tags/Master%20Pages/default.aspx">Master Pages</a>
			</li>
		
			<li>
				<a id="tagCloud_Tags_ctl11_TagUrl" title="NHibernate (1)" class="tag-style-1 tag-item" href="http://blog.codeofrob.com/Tags/NHibernate/default.aspx">NHibernate</a>
			</li>
		
			<li>
				<a id="tagCloud_Tags_ctl12_TagUrl" title="Themes (1)" class="tag-style-1 tag-item" href="http://blog.codeofrob.com/Tags/Themes/default.aspx">Themes</a>
			</li>
		
			</ul>
		
	<a id="tagCloud_DefaultTagLink" href="http://blog.codeofrob.com/Tags/default.aspx">more tags...</a>
</div>
 -->
			<SCRIPT type="text/javascript"><!--
google_ad_client = "pub-7596736418453371";
/* Blog - Side Banner */
google_ad_slot = "3763096766";
google_ad_width = 120;
google_ad_height = 240;
//-->
</SCRIPT>
<SCRIPT type="text/javascript" src="./Rob Ashton_files/show_ads.js">
</SCRIPT><SCRIPT src="./Rob Ashton_files/expansion_embed.js"></SCRIPT><SCRIPT src="./Rob Ashton_files/test_domain.js"></SCRIPT><SCRIPT>google_protectAndRun("ads_core.google_render_ad", google_handleError, google_render_ad);</SCRIPT><INS style="display:inline-table;border:none;height:240px;margin:0;padding:0;position:relative;visibility:visible;width:120px"><INS style="display:block;border:none;height:240px;margin:0;padding:0;position:relative;visibility:visible;width:120px"><IFRAME allowtransparency="true" frameborder="0" height="240" hspace="0" id="google_ads_frame1" marginheight="0" marginwidth="0" name="google_ads_frame" scrolling="no" src="./Rob Ashton_files/ads.htm" style="left:0;position:absolute;top:0" vspace="0" width="120"></IFRAME></INS></INS>
			

			
		<H2>Post Categories</H2>
		
				<UL>
			
				<LI><A id="ArchiveLinks_Categories_CatList_ctl00_LinkList_ctl01_Link" title="" rel="" href="http://codeofrob.com/category/1.aspx">Meta</A> <A id="ArchiveLinks_Categories_CatList_ctl00_LinkList_ctl01_RssLink" title="Subscribe to Meta" href="http://codeofrob.com/category/1.aspx/rss">(rss)</A></LI>
			
				<LI><A id="ArchiveLinks_Categories_CatList_ctl00_LinkList_ctl02_Link" title="" rel="" href="http://codeofrob.com/category/2.aspx">NHibernate</A> <A id="ArchiveLinks_Categories_CatList_ctl00_LinkList_ctl02_RssLink" title="Subscribe to NHibernate" href="http://codeofrob.com/category/2.aspx/rss">(rss)</A></LI>
			
				<LI><A id="ArchiveLinks_Categories_CatList_ctl00_LinkList_ctl03_Link" title="" rel="" href="http://codeofrob.com/category/3.aspx">FluentNHibernate</A> <A id="ArchiveLinks_Categories_CatList_ctl00_LinkList_ctl03_RssLink" title="Subscribe to FluentNHibernate" href="http://codeofrob.com/category/3.aspx/rss">(rss)</A></LI>
			
				<LI><A id="ArchiveLinks_Categories_CatList_ctl00_LinkList_ctl04_Link" title="" rel="" href="http://codeofrob.com/category/4.aspx">Linq</A> <A id="ArchiveLinks_Categories_CatList_ctl00_LinkList_ctl04_RssLink" title="Subscribe to Linq" href="http://codeofrob.com/category/4.aspx/rss">(rss)</A></LI>
			
				<LI><A id="ArchiveLinks_Categories_CatList_ctl00_LinkList_ctl05_Link" title="" rel="" href="http://codeofrob.com/category/5.aspx">Linq2NHibernate</A> <A id="ArchiveLinks_Categories_CatList_ctl00_LinkList_ctl05_RssLink" title="Subscribe to Linq2NHibernate" href="http://codeofrob.com/category/5.aspx/rss">(rss)</A></LI>
			
				<LI><A id="ArchiveLinks_Categories_CatList_ctl00_LinkList_ctl06_Link" title="" rel="" href="http://codeofrob.com/category/6.aspx">NUnit</A> <A id="ArchiveLinks_Categories_CatList_ctl00_LinkList_ctl06_RssLink" title="Subscribe to NUnit" href="http://codeofrob.com/category/6.aspx/rss">(rss)</A></LI>
			
				<LI><A id="ArchiveLinks_Categories_CatList_ctl00_LinkList_ctl07_Link" title="" rel="" href="http://codeofrob.com/category/7.aspx">General</A> <A id="ArchiveLinks_Categories_CatList_ctl00_LinkList_ctl07_RssLink" title="Subscribe to General" href="http://codeofrob.com/category/7.aspx/rss">(rss)</A></LI>
			
				<LI><A id="ArchiveLinks_Categories_CatList_ctl00_LinkList_ctl08_Link" title="" rel="" href="http://codeofrob.com/category/8.aspx">ASP.NET MVC</A> <A id="ArchiveLinks_Categories_CatList_ctl00_LinkList_ctl08_RssLink" title="Subscribe to ASP.NET MVC" href="http://codeofrob.com/category/8.aspx/rss">(rss)</A></LI>
			
				<LI><A id="ArchiveLinks_Categories_CatList_ctl00_LinkList_ctl09_Link" title="" rel="" href="http://codeofrob.com/category/9.aspx">ASP.NET Forms</A> <A id="ArchiveLinks_Categories_CatList_ctl00_LinkList_ctl09_RssLink" title="Subscribe to ASP.NET Forms" href="http://codeofrob.com/category/9.aspx/rss">(rss)</A></LI>
			
				<LI><A id="ArchiveLinks_Categories_CatList_ctl00_LinkList_ctl10_Link" title="" rel="" href="http://codeofrob.com/category/10.aspx">multi-tenancy</A> <A id="ArchiveLinks_Categories_CatList_ctl00_LinkList_ctl10_RssLink" title="Subscribe to multi-tenancy" href="http://codeofrob.com/category/10.aspx/rss">(rss)</A></LI>
			
				</UL>
			
	
		<H2>Archives</H2>
		
				<UL>
			
				<LI><A id="ArchiveLinks_Categories_CatList_ctl01_LinkList_ctl01_Link" title="" rel="" href="http://codeofrob.com/archive/2010/02.aspx">February, 2010 (5)</A> </LI>
			
				<LI><A id="ArchiveLinks_Categories_CatList_ctl01_LinkList_ctl02_Link" title="" rel="" href="http://codeofrob.com/archive/2010/01.aspx">January, 2010 (2)</A> </LI>
			
				<LI><A id="ArchiveLinks_Categories_CatList_ctl01_LinkList_ctl03_Link" title="" rel="" href="http://codeofrob.com/archive/2009/12.aspx">December, 2009 (2)</A> </LI>
			
				<LI><A id="ArchiveLinks_Categories_CatList_ctl01_LinkList_ctl04_Link" title="" rel="" href="http://codeofrob.com/archive/2009/11.aspx">November, 2009 (1)</A> </LI>
			
				<LI><A id="ArchiveLinks_Categories_CatList_ctl01_LinkList_ctl05_Link" title="" rel="" href="http://codeofrob.com/archive/2009/10.aspx">October, 2009 (3)</A> </LI>
			
				</UL>
			
	

			
<H2>Blog Stats</H2>
<UL id="blogStats">
	<LI>Posts - 13</LI>
	<LI>Stories - 0</LI>
	<LI>Comments - 20</LI>
	<LI>Trackbacks - 1</LI>
</UL>
		
	</DIV>
	
	<DIV id="content">
		
					
		
<P class="date">
	Tuesday, February 09, 2010		  
	<A id="_1edc5002b43f_HomePageDays_DaysList_ctl00_DayItem_ImageLink" title="Click to see entries for this day." href="http://codeofrob.com/archive/2010/02/09.aspx" style="display:inline-block;border-width:0px;height:15px;width:12px;">#</A>
</P>


		<DIV class="post">
			<H2><A id="_1edc5002b43f_HomePageDays_DaysList_ctl00_DayItem_DayList_ctl00_TitleUrl" title="Click To View Entry." href="http://codeofrob.com/archive/2010/02/09/ddd8-feedback.-feedback.aspx">DDD8 Feedback... feedback</A></H2>
			
			<P><FONT face="Arial">The feedback from DDD8 has come in, in anonymous form and for the most part I'm completely overwhelmed by the positive response the talk garnered from the people who attended the talk.</FONT></P>
<P><FONT face="Arial">However, I get the feeling my talk managed to polarise the room somewhat and I'd like to respond to those that went completely the opposite way with their responses and apologise if I went a different direction to what they expected!</FONT></P>
<P><FONT face="Arial"><STRONG>Varied Demos</STRONG><BR>
Okay, no defence here at all - showing you all the same website over and over again until I got around to showing the final product of the concepts( NerdDinner) was a bit unfair - I'll try to put together the demos a bit earlier than 3am the night before next time :)</FONT></P>
<P><FONT face="Arial">I think perhaps concentrating on NerdDinner from the start and showing how I built that up might have helped, but when I put the demos together I was struggling to simplify that enough for the demos to make sense in their own right (hence the hurried individual ones)</FONT></P>
<P><FONT face="Arial"><STRONG>Not enough Detail</STRONG><BR>
I never intended on going into detail on the concepts outlined - I don't feel you ever can go into detail in a talk that lasts less than an hour - nevertheless, if you'd like more detail you're all more than welcome to respond to my series on multi-tenancy with questions and more feedback! </FONT></P>
<P><FONT face="Arial">I already have a longer slot booked at one user group - and would be happy to spend more time on the subject at any other user groups or developer meet-ups - just ask.</FONT></P>
<P><FONT face="Arial"><STRONG>Too technical</STRONG><BR>
I should have made clear in my summary that a prior knowledge of ASP.NET MVC would be useful - and I apologise for this - a few people complained about this and I'll know next time to be more up front about what I intend on covering in a session.</FONT></P>
<P><FONT face="Arial"><STRONG>Too fast</STRONG><BR>
This is probably one of the most subjective responses I had, and a lot of people said they loved the pace - which kept them awake and interested throughout the talk. I don't think I'll change this in my future talks (although I might try to talk slower), but another disclaimer may well not go amiss "This talk will be fast-paced and try to throw as much information at you in an hour as your brain can cope with" </FONT></P>
<P><FONT face="Arial"><STRONG>Wrong approach</STRONG><BR>
Okay, only one person mentioned this - and said I should be using IOC to solve the issues I outlined. I'm not entirely sure (apart from the controllers) where this would have helped - so feel free to contribute to the multi-tenancy conversation in the comments of&nbsp; this blog when I get to that point whoever you are!</FONT></P>
<P><FONT face="Arial">I was also criticised by the same person for even wanting to host the same application under the same IIS instance - I believe I covered this as an option in one of my slides however and I was certainly not suggesting that I recommended keeping your customers in one basket.</FONT></P>
<P><FONT face="Arial">I think there are masses of conversations and discussions to be had over the approach I took to solving the problem - which is why I'm now doing this blog series - to get the discussion going and come to an agreed solution between us all.</FONT></P>
<P><FONT face="Arial"><STRONG>Poor distribution of Swag</STRONG><BR>
Yes yes yes, I'm sorry - I'm really bad at this kind of thing because it's not something I'm interested in - I'll try to do better next time.</FONT></P>
<P><FONT face="Arial"><STRONG>Too nervous</STRONG><BR>
Guilty as charged, my first time speaking in a while - I'll try to be more confident next time</FONT></P>
<P><FONT face="Arial"><STRONG>Too confident/arrogant</STRONG><BR>
Towards the end perhaps you're right, I'm trying to work out whether this is better or worse than the above!</FONT></P>
<P><FONT face="Arial"><STRONG>Ending on a high note</STRONG><BR>
In response to all the people who said my talk had great pace, great content, that it was incredibly useful and relevant, that the subject area had justice given to it, and that I clearly knew what I was talking about - thanks a bunch, rest assured that the above comments have balanced out the ego and I can still fit through doors.</FONT></P>
<P><FONT face="Arial">Thanks to everybody who attended and asked questions - I'll be seeing you all again shortly no doubt.<BR>
</FONT></P>
			
			<P class="postfoot">		
				posted @ <A href="http://codeofrob.com/archive/2010/02/09/ddd8-feedback.-feedback.aspx" title="Permanent link to this post">Tuesday, February 09, 2010 5:28 PM</A> | <A href="http://codeofrob.com/archive/2010/02/09/ddd8-feedback.-feedback.aspx#feedback" title="comments, pingbacks, trackbacks" class="comments">Feedback (0)</A>
			</P>
		</DIV>
	

	
		
<P class="date">
	Monday, February 08, 2010		  
	<A id="_1edc5002b43f_HomePageDays_DaysList_ctl01_DayItem_ImageLink" title="Click to see entries for this day." href="http://codeofrob.com/archive/2010/02/08.aspx" style="display:inline-block;border-width:0px;height:15px;width:12px;">#</A>
</P>


		<DIV class="post">
			<H2><A id="_1edc5002b43f_HomePageDays_DaysList_ctl01_DayItem_DayList_ctl00_TitleUrl" title="Click To View Entry." href="http://codeofrob.com/archive/2010/02/08/multi-tenancy-in-asp.net-mvc-views.aspx">Multi-tenancy in ASP.NET MVC - Views</A></H2>
			
			<P><STRONG>Previous entries in the series</STRONG></P>
<UL>
    <LI><A href="http://codeofrob.com/archive/2010/02/01/multi-tenancy-in-asp.net-mvc-why-do-we-want-to.aspx">Why we want it</A> </LI>
    <LI><A href="http://codeofrob.com/archive/2010/02/04/multi-tenancy-in-asp.net-mvc-breaking-it-down.aspx">Breaking it down + Themes</A> </LI>
</UL>
<P><FONT face="Arial">One of the requirements of our multi-tenant application, is having the ability to replace or add new pages (or parts of pages) in the system for each of our modules.</FONT></P>
<P><FONT face="Arial">While a customer may ask for an entirely new 'area' on the site (MVC2 covers this), the chances are they just want the addition of a single page or replacement of what is already provided in the stock product.</FONT></P>
<P><FONT face="Arial">The obvious port of call for change of this kind are the views and partial views situated within the web application, and finding a way to add or override these on a per-module basis.</FONT></P>
<P><FONT face="Arial"><FONT face="Arial">Throughout the following entry I'll assume we have access to a configuration provider that looks something like this:</FONT></FONT></P>
<FONT face="Arial">
<DIV id="highlighter_36994" class="syntaxhighlighter  "><DIV class="bar    "><DIV class="toolbar"><A href="http://codeofrob.com/#viewSource" title="view source" style="width: 16px; height: 16px; " class="item viewSource">view source</A><A href="http://codeofrob.com/#printSource" title="print" style="width: 16px; height: 16px; " class="item printSource">print</A><A href="http://codeofrob.com/#about" title="?" style="width: 16px; height: 16px; " class="item about">?</A></DIV></DIV><DIV class="lines"><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>1</CODE></TD><TD class="content"><CODE class="keyword">public</CODE> <CODE class="keyword">interface</CODE> <CODE class="plain">IConfigurationProvider</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>2</CODE></TD><TD class="content"><CODE class="plain">{</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>3</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="plain">Configuration GetActiveConfiguration();</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>4</CODE></TD><TD class="content"><CODE class="plain">}</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<P><FONT face="Arial">Where Configuration has the following simplistic structure (for demo purposes)</FONT></P>
<DIV id="highlighter_782710" class="syntaxhighlighter  "><DIV class="bar            "><DIV class="toolbar"><A href="http://codeofrob.com/#viewSource" title="view source" style="width: 16px; height: 16px; " class="item viewSource">view source</A><A href="http://codeofrob.com/#printSource" title="print" style="width: 16px; height: 16px; " class="item printSource">print</A><A href="http://codeofrob.com/#about" title="?" style="width: 16px; height: 16px; " class="item about">?</A></DIV></DIV><DIV class="lines"><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>01</CODE></TD><TD class="content"><CODE class="keyword">public</CODE> <CODE class="keyword">class</CODE> <CODE class="plain">Configuration</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>02</CODE></TD><TD class="content"><CODE class="plain">{</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>03</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="keyword">public</CODE> <CODE class="keyword">string</CODE> <CODE class="plain">Theme</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>04</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="plain">{</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>05</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="keyword">get</CODE><CODE class="plain">;</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>06</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="keyword">set</CODE><CODE class="plain">;</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>07</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="plain">}</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>08</CODE></TD><TD class="content">&nbsp;</TD></TR></TBODY></TABLE></DIV><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>09</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="keyword">public</CODE> <CODE class="plain">Module[] Modules</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>10</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="plain">{</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>11</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="keyword">get</CODE><CODE class="plain">;</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>12</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="keyword">set</CODE><CODE class="plain">;</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>13</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="plain">}</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>14</CODE></TD><TD class="content"><CODE class="plain">}</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>15</CODE></TD><TD class="content">&nbsp;</TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>16</CODE></TD><TD class="content"><CODE class="keyword">public</CODE> <CODE class="keyword">class</CODE> <CODE class="plain">Module</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>17</CODE></TD><TD class="content"><CODE class="plain">{</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>18</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="keyword">public</CODE> <CODE class="keyword">string</CODE> <CODE class="plain">Id</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>19</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="plain">{</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>20</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="keyword">get</CODE><CODE class="plain">;</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>21</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="keyword">set</CODE><CODE class="plain">;</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>22</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="plain">}</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>23</CODE></TD><TD class="content"><CODE class="plain">}</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<P><FONT face="Arial">In other words, we have a way of querying for the 'currently active configuration' (remember, our active configuration is per-request because we're attempting true multi-tenancy), and our configuration consists of a single theme and a list of loaded modules.</FONT></P>
<P><FONT face="Arial">Each module has an Id and we'll use this to infer a number of things by convention. (Again, this is just a demo, and you can do this<EM> however you like</EM>.)</FONT></P>
<P><FONT face="Arial"><BR>
<FONT face="Arial">I assume each module will provide a collection of views and partial views, and if a module is loaded *after* another module, and provides another view or partial view with the same name and path, it will replace the previously loaded view or partial view.<BR>
</FONT></FONT>
</P><P><FONT face="Arial">I was asked in a comment on a previous entry what my folder structure looked like,&nbsp; and this is where the folder structure starts to become important.<BR>
</FONT></P>
<P><IMG alt="Collapsed views" src="./Rob Ashton_files/views_collapsed.png"></P>
<P><FONT face="Arial">Every module's views come packaged in a single directory,&nbsp; with another directory called Views inside of it.</FONT></P>
<P><FONT face="Arial">Underneath each of these Views directories, is the same folder structure you'd expect from a traditional ASP.NET MVC Website, with a directory per controller and a collection of views and partial views.</FONT></P>
<P><FONT face="Arial">This means that both Core and ModuleOne can contribute or replace views for the&nbsp; actions from the "Home" Controller.</FONT></P>
<P><FONT face="Arial">A thing of note, is that the web.config file that would ordinarily live in the Views directory in a traditional ASP.NET MVC application has been moved out into the Site directory above all the module directories - as this does things like give you Intellisense in your views (if I recall correctly) as well as actually facilitating the functionality in the ASP.NET MVC Framework.</FONT></P>
<P><FONT face="Arial">Expanded, our project looks like this:<BR>
</FONT></P>
<P><IMG alt="Expanded folder selection" src="./Rob Ashton_files/views_expanded.png"><BR>
&nbsp;</P>
<P><FONT face="Arial">Assuming the partial view "Widget" is exposed somewhere on the Index page, the following desired scenarios present themselves:</FONT></P>
<P><FONT face="Arial"><STRONG>Core Module loaded:</STRONG></FONT></P>
<P><FONT face="Arial">/Home/Index requested =&gt; Index served from CoreModule, with Widget from CoreModule<BR>
/Home/Extra requested =&gt; Page not found</FONT></P>
<P><FONT face="Arial"><STRONG>Core + ModuleOne Loaded (in that order)</STRONG></FONT></P>
<P><FONT face="Arial">/Home/Index requested =&gt; Index served from CoreModule with Widget from ModuleOne<BR>
/Home/Extra requested =&gt; Extra served from ModuleOne</FONT></P>
<P><FONT face="Arial"><STRONG>ModuleOne + Core Loaded (in that order)</STRONG></FONT></P>
<P><FONT face="Arial">/Home/Index requested =&gt; Index served from CoreModule with Widget from CoreModule<BR>
/Home/Extra requested =&gt; Extra served from ModuleOne</FONT></P>
<FONT face="Arial"><FONT face="Arial">
<H3><FONT face="Arial">Enter the View Engine</FONT></H3>
</FONT>
<P><FONT face="Arial">This is all very well and good as our requirements are quite clear, but the next step is making the above happen!</FONT></P>
<P><FONT face="Arial">ASP.NET MVC provides the facility to override the View Engine, which is the component that determines how views are rendered.</FONT></P>
<P><FONT face="Arial">This can be used to simply load views in from a different location, or even to allow completely bespoke mark-up to be transformed into HTML (Ala the <A href="http://sparkviewengine.com/">Spark View Engine</A>).</FONT></P>
<P><FONT face="Arial">By default, the framework will use System.Web.Mvc.WebFormViewEngine, which is what loads the views from the View directory using the default convention and returns a ViewEngineResult containing a WebFormView which eventually ends up being used to render out the view.</FONT></P>
<P><FONT face="Arial">The WebFormViewEngine class itself is extendable, and by inheriting from it we can change the search paths it uses to locate the views and partial views.</FONT></P>
<P><FONT face="Arial">Naturally this is the first place we look to solve our problem, as writing less code is always preferable if we can get away with it.</FONT></P>
<P><FONT face="Arial">The set-up of WebFormViewEngine is that in the constructor we&nbsp; can give it a selection of search paths - which means for the life-time of WebFormViewEngine those search paths are set.</FONT></P>
<P><FONT face="Arial">They can be modified per-request, but WebFormViewEngine inherits from VirtualPathProviderViewEngine which caches paths under which it has found files (or at least, reading the source it looks like it does!).</FONT></P>
<P><FONT face="Arial">For performance purposes (per-configuration path caching), it would probably therefore be best implementing a ViewEngine from scratch, but as the main body of work is achieved through the return result of the&nbsp; view engine methods, this is not as daunting an experience as we might think.</FONT></P>
<P><FONT face="Arial">This is what IViewEngine looks like when we first create it:<BR>
</FONT></P>
<DIV id="highlighter_513616" class="syntaxhighlighter  "><DIV class="bar     "><DIV class="toolbar"><A href="http://codeofrob.com/#viewSource" title="view source" style="width: 16px; height: 16px; " class="item viewSource">view source</A><A href="http://codeofrob.com/#printSource" title="print" style="width: 16px; height: 16px; " class="item printSource">print</A><A href="http://codeofrob.com/#about" title="?" style="width: 16px; height: 16px; " class="item about">?</A></DIV></DIV><DIV class="lines"><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>01</CODE></TD><TD class="content"><CODE class="keyword">public</CODE> <CODE class="keyword">class</CODE> <CODE class="plain">ModuleViewEngine : IViewEngine</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>02</CODE></TD><TD class="content"><CODE class="plain">{</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>03</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="keyword">public</CODE> <CODE class="plain">ViewEngineResult FindPartialView(ControllerContext controllerContext, </CODE><CODE class="keyword">string</CODE> <CODE class="plain">partialViewName, </CODE><CODE class="keyword">bool</CODE> <CODE class="plain">useCache)</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>04</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="plain">{</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>05</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="keyword">throw</CODE> <CODE class="keyword">new</CODE> <CODE class="plain">NotImplementedException();</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>06</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="plain">}</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>07</CODE></TD><TD class="content">&nbsp;</TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>08</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="keyword">public</CODE> <CODE class="plain">ViewEngineResult FindView(ControllerContext controllerContext, </CODE><CODE class="keyword">string</CODE> <CODE class="plain">viewName, </CODE><CODE class="keyword">string</CODE> <CODE class="plain">masterName, </CODE><CODE class="keyword">bool</CODE> <CODE class="plain">useCache)</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>09</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="plain">{</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>10</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="keyword">throw</CODE> <CODE class="keyword">new</CODE> <CODE class="plain">NotImplementedException();</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>11</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="plain">}</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>12</CODE></TD><TD class="content">&nbsp;</TD></TR></TBODY></TABLE></DIV><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>13</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="keyword">public</CODE> <CODE class="keyword">void</CODE> <CODE class="plain">ReleaseView(ControllerContext controllerContext, IView view)</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>14</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="plain">{</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>15</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="keyword">throw</CODE> <CODE class="keyword">new</CODE> <CODE class="plain">NotImplementedException();</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>16</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="plain">}</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>17</CODE></TD><TD class="content"><CODE class="plain">}</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<P><FONT face="Arial">First things first, ReleaseView doesn't need to do anything unless the views you return implement IDisposable, and for that the following code can be used.<BR>
</FONT><FONT face="Arial"></FONT></P><FONT face="Arial">
<DIV id="highlighter_120607" class="syntaxhighlighter  "><DIV class="bar  "><DIV class="toolbar"><A href="http://codeofrob.com/#viewSource" title="view source" style="width: 16px; height: 16px; " class="item viewSource">view source</A><A href="http://codeofrob.com/#printSource" title="print" style="width: 16px; height: 16px; " class="item printSource">print</A><A href="http://codeofrob.com/#about" title="?" style="width: 16px; height: 16px; " class="item about">?</A></DIV></DIV><DIV class="lines"><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>1</CODE></TD><TD class="content"><CODE class="keyword">public</CODE> <CODE class="keyword">void</CODE> <CODE class="plain">ReleaseView(ControllerContext controllerContext, IView view)</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>2</CODE></TD><TD class="content"><CODE class="plain">{</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>3</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="plain">IDisposable disposable = view </CODE><CODE class="keyword">as</CODE> <CODE class="plain">IDisposable;</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>4</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="keyword">if</CODE> <CODE class="plain">(disposable != </CODE><CODE class="keyword">null</CODE><CODE class="plain">)</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>5</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="plain">{</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>6</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="plain">disposable.Dispose();</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>7</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="plain">}</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>8</CODE></TD><TD class="content"><CODE class="plain">}</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<P><FONT face="Arial">The next thing of note is that the searching logic for locating the files is the same regardless of whether the engine is looking for a view or partial view, so we can create the following method and forget about it for now:</FONT></P>
<DIV id="highlighter_81532" class="syntaxhighlighter  "><DIV class="bar  "><DIV class="toolbar"><A href="http://codeofrob.com/#viewSource" title="view source" style="width: 16px; height: 16px; " class="item viewSource">view source</A><A href="http://codeofrob.com/#printSource" title="print" style="width: 16px; height: 16px; " class="item printSource">print</A><A href="http://codeofrob.com/#about" title="?" style="width: 16px; height: 16px; " class="item about">?</A></DIV></DIV><DIV class="lines"><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>1</CODE></TD><TD class="content"><CODE class="keyword">private</CODE> <CODE class="keyword">string</CODE> <CODE class="plain">ResolvePath(String requestedFile, ControllerContext controllerContext)</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>2</CODE></TD><TD class="content"><CODE class="plain">{</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>3</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="keyword">throw</CODE> <CODE class="keyword">new</CODE> <CODE class="plain">NotImplementedException();</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>4</CODE></TD><TD class="content"><CODE class="plain">}</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<P><FONT face="Arial">FindPartialView and FindView both return the same type, and with similar values - I won't go into detail because the procedure is well documented elsewhere, but my methods in this example look like this:<BR>
</FONT><FONT face="Arial"></FONT></P><FONT face="Arial">
<DIV id="highlighter_501889" class="syntaxhighlighter  "><DIV class="bar     "><DIV class="toolbar"><A href="http://codeofrob.com/#viewSource" title="view source" style="width: 16px; height: 16px; " class="item viewSource">view source</A><A href="http://codeofrob.com/#printSource" title="print" style="width: 16px; height: 16px; " class="item printSource">print</A><A href="http://codeofrob.com/#about" title="?" style="width: 16px; height: 16px; " class="item about">?</A></DIV></DIV><DIV class="lines"><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>01</CODE></TD><TD class="content"><CODE class="keyword">public</CODE> <CODE class="plain">ViewEngineResult FindPartialView(ControllerContext controllerContext, </CODE><CODE class="keyword">string</CODE> <CODE class="plain">partialViewName, </CODE><CODE class="keyword">bool</CODE> <CODE class="plain">useCache)</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>02</CODE></TD><TD class="content"><CODE class="plain">{</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>03</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="plain">String foundFile = ResolvePath(</CODE><CODE class="keyword">string</CODE><CODE class="plain">.Format(</CODE><CODE class="string">"{0}.ascx"</CODE><CODE class="plain">, partialViewName), controllerContext);</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>04</CODE></TD><TD class="content">&nbsp;</TD></TR></TBODY></TABLE></DIV><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>05</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="keyword">return</CODE> <CODE class="keyword">new</CODE> <CODE class="plain">ViewEngineResult(</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>06</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="keyword">new</CODE> <CODE class="plain">WebFormView(foundFile),</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>07</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="keyword">this</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>08</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="plain">);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>09</CODE></TD><TD class="content"><CODE class="plain">}</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>10</CODE></TD><TD class="content">&nbsp;</TD></TR></TBODY></TABLE></DIV><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>11</CODE></TD><TD class="content"><CODE class="keyword">public</CODE> <CODE class="plain">ViewEngineResult FindView(ControllerContext controllerContext, </CODE><CODE class="keyword">string</CODE> <CODE class="plain">viewName, </CODE><CODE class="keyword">string</CODE> <CODE class="plain">masterName, </CODE><CODE class="keyword">bool</CODE> <CODE class="plain">useCache)</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>12</CODE></TD><TD class="content"><CODE class="plain">{</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>13</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="plain">String foundFile = ResolvePath(</CODE><CODE class="keyword">string</CODE><CODE class="plain">.Format(</CODE><CODE class="string">"{0}.aspx"</CODE><CODE class="plain">, viewName), controllerContext);</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>14</CODE></TD><TD class="content">&nbsp;</TD></TR></TBODY></TABLE></DIV><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>15</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="keyword">return</CODE> <CODE class="keyword">new</CODE> <CODE class="plain">ViewEngineResult(</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>16</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="keyword">new</CODE> <CODE class="plain">WebFormView(</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>17</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="plain">foundFile,</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>18</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="plain">masterName),</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>19</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="keyword">this</CODE><CODE class="plain">);</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>20</CODE></TD><TD class="content"><CODE class="plain">}</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<P class="brush: csharp;" title="code">&nbsp;</P>
<P><FONT face="Arial"><STRONG>Note:</STRONG> This example will not deal with absolute paths being specified, it will also not deal gracefully with the file not being found at all - this simply involves returning a list of the searched locations on failure and isn't worth discussing further here.</FONT></P>
<P><FONT face="Arial">ResolvePath is entirely dependent on the logic you want to follow when searching for your per configuration module provided views, but a reference implementation might look like the following:</FONT></P>
<FONT face="Arial">
<DIV id="highlighter_366413" class="syntaxhighlighter  "><DIV class="bar           "><DIV class="toolbar"><A href="http://codeofrob.com/#viewSource" title="view source" style="width: 16px; height: 16px; " class="item viewSource">view source</A><A href="http://codeofrob.com/#printSource" title="print" style="width: 16px; height: 16px; " class="item printSource">print</A><A href="http://codeofrob.com/#about" title="?" style="width: 16px; height: 16px; " class="item about">?</A></DIV></DIV><DIV class="lines"><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>01</CODE></TD><TD class="content"><CODE class="keyword">private</CODE> <CODE class="keyword">string</CODE> <CODE class="plain">ResolvePath(String requestedFile, ControllerContext controllerContext)</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>02</CODE></TD><TD class="content"><CODE class="plain">{</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>03</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="plain">String result = </CODE><CODE class="keyword">string</CODE><CODE class="plain">.Empty;</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>04</CODE></TD><TD class="content">&nbsp;</TD></TR></TBODY></TABLE></DIV><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>05</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="comments">// Reverse the module order so we search from most recently ordered first</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>06</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="plain">var searchModules = mConfigurationProvider</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>07</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="plain">.GetActiveConfiguration()</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>08</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="plain">.Modules</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>09</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="plain">.Reverse()</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>10</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="plain">.Select(m =&gt; m.Id);</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>11</CODE></TD><TD class="content">&nbsp;</TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>12</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="comments">// Search through each module in turn</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>13</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="keyword">foreach</CODE> <CODE class="plain">(String module </CODE><CODE class="keyword">in</CODE> <CODE class="plain">searchModules)</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>14</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="plain">{</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>15</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="comments">// Try the controller specific view folder first</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>16</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="plain">String controllerName = controllerContext.RouteData.Values[</CODE><CODE class="string">"controller"</CODE><CODE class="plain">] </CODE><CODE class="keyword">as</CODE> <CODE class="keyword">string</CODE><CODE class="plain">;</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>17</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="plain">result = GetFilename(requestedFile, controllerContext, module, controllerName);</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>18</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="keyword">if</CODE> <CODE class="plain">(</CODE><CODE class="keyword">string</CODE><CODE class="plain">.IsNullOrEmpty(result))</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>19</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="plain">{</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>20</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="plain">result = GetFilename(requestedFile, controllerContext, module, </CODE><CODE class="string">"Shared"</CODE><CODE class="plain">);</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>21</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="plain">}</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>22</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="keyword">if</CODE> <CODE class="plain">(!String.IsNullOrEmpty(result)) { </CODE><CODE class="keyword">return</CODE> <CODE class="plain">result; }</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>23</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="plain">}</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>24</CODE></TD><TD class="content">&nbsp;</TD></TR></TBODY></TABLE></DIV><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>25</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="comments">// Error!</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>26</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="keyword">return</CODE> <CODE class="keyword">null</CODE><CODE class="plain">;</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>27</CODE></TD><TD class="content"><CODE class="plain">}</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>28</CODE></TD><TD class="content">&nbsp;</TD></TR></TBODY></TABLE></DIV><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>29</CODE></TD><TD class="content"><CODE class="keyword">private</CODE> <CODE class="keyword">string</CODE> <CODE class="plain">GetFilename(String requestedFile, ControllerContext controllerContext, String module, String controllerName)</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>30</CODE></TD><TD class="content"><CODE class="plain">{</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>31</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="plain">String path = </CODE><CODE class="keyword">string</CODE><CODE class="plain">.Format(</CODE><CODE class="string">"~/Views/{0}/{1}/{2}/"</CODE><CODE class="plain">, module, controllerName, requestedFile);</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>32</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="plain">String filename = controllerContext.HttpContext.Server.MapPath(path);</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>33</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="keyword">if</CODE> <CODE class="plain">(File.Exists(filename)) { </CODE><CODE class="keyword">return</CODE> <CODE class="plain">path; }</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>34</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="keyword">return</CODE> <CODE class="keyword">null</CODE><CODE class="plain">;</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>35</CODE></TD><TD class="content"><CODE class="plain">}</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<P><FONT face="Arial">Where mConfurationProvider is the IConfigurationProvider mentioned earlier.</FONT></P>
<P><FONT face="Arial">In this implementation, we reverse the order of the loaded modules to get the most recently loaded first, and then select just the module id.</FONT></P>
<P><FONT face="Arial">That gives us a list of folders names to search through in order to find the view, first attempting to find the file within the folder for the current action, and then the shared directory (just like the default WebFormViewEngine).</FONT></P>
<P><FONT face="Arial">If it's not found, we return null and cross our fingers and hope for the best.</FONT></P>
<P><FONT face="Arial">Just to re-iterate, in the real world you need to add error handling for when a view is not located, and code to deal with absolute paths (although maybe you don't support them and don't need to write that code!).</FONT></P>
<P><FONT face="Arial">Because we have the current configuration, we can perform the caching of file locations on a per-configuration basis - just remember to disable caching during testing and debugging!<BR>
</FONT><FONT face="Arial"></FONT></P><FONT face="Arial">
<FONT face="Arial">
<H3><FONT face="Arial">Summary</FONT></H3>
</FONT><FONT face="Arial">
<P><FONT face="Arial">I haven't gone into a lot of detail about the implementation of the view engine because it's beyond the scope of this blog entry - a lot of information about writing custom view engines can be found with a "Bing" (or Google search *cough*) and it was not my intention of repeating them.</FONT></P>
<P><FONT face="Arial">What we have covered is how we might utilise the power of view engines and a set of folder conventions to allow modules to create/override views and partial views. </FONT></P>
<P><FONT face="Arial">As with all of these entries, the actual implementation is up to you and your particular product needs and the code examples should not be taken as gospel.</FONT></P>
<P><FONT face="Arial">Next entry we'll be getting even more technical and covering how we can allow the modules to provide actions for these added views - and even how to override controller actions that have already been defined in other modules.<BR>
</FONT><FONT face="Arial"><FONT face="Arial"></FONT></FONT></P><FONT face="Arial">
<P><FONT face="Arial"><FONT face="Arial">Examples of this code can be found in the DDD8 code samples <A href="http://codeofrob.com/archive/2010/01/31/ddd8-post-event.aspx">here</A>.</FONT></FONT></P>
</FONT></FONT></FONT>
</FONT>
			
			<P class="postfoot">		
				posted @ <A href="http://codeofrob.com/archive/2010/02/08/multi-tenancy-in-asp.net-mvc-views.aspx" title="Permanent link to this post">Monday, February 08, 2010 9:19 PM</A> | <A href="http://codeofrob.com/archive/2010/02/08/multi-tenancy-in-asp.net-mvc-views.aspx#feedback" title="comments, pingbacks, trackbacks" class="comments">Feedback (0)</A>
			</P>
		</FONT></FONT></FONT></FONT></DIV><FONT face="Arial"><FONT face="Arial"><FONT face="Arial"><FONT face="Arial">
	

	
		
<P class="date">
	Friday, February 05, 2010		  
	<A id="_1edc5002b43f_HomePageDays_DaysList_ctl02_DayItem_ImageLink" title="Click to see entries for this day." href="http://codeofrob.com/archive/2010/02/05.aspx" style="display:inline-block;border-width:0px;height:15px;width:12px;">#</A>
</P>


		<DIV class="post">
			<H2><A id="_1edc5002b43f_HomePageDays_DaysList_ctl02_DayItem_DayList_ctl00_TitleUrl" title="Click To View Entry." href="http://codeofrob.com/archive/2010/02/05/multi-tenancy-in-asp.net-mvc-ddd8-video.aspx">Multi-tenancy in ASP.NET MVC - DDD8 Video</A></H2>
			
			<P>The video is now up of my talk at DDD8, I've reviewed it and determined that while it's a bit fast ("Like listening to a podcast at double speed" according to <A href="http://twitter.com/lukesmith">@lukesmith</A>) it's not too embarrassing.</P>

<P>Unfortunately the audio gets a bit out of sync towards the code, so you'll have to use your imagination until what I'm talking about shows up ;-)</P>

<OBJECT width="400" height="300"><PARAM name="allowfullscreen" value="true"><PARAM name="allowscriptaccess" value="always"><PARAM name="movie" value="http://vimeo.com/moogaloop.swf?clip_id=9217399&amp;server=vimeo.com&amp;show_title=1&amp;show_byline=1&amp;show_portrait=0&amp;color=&amp;fullscreen=1"><EMBED src="http://vimeo.com/moogaloop.swf?clip_id=9217399&amp;server=vimeo.com&amp;show_title=1&amp;show_byline=1&amp;show_portrait=0&amp;color=&amp;fullscreen=1" type="application/x-shockwave-flash" allowfullscreen="true" allowscriptaccess="always" width="400" height="300"></OBJECT><P><A href="http://vimeo.com/9217399">Multi-tenant ASP.NET MVC Projects (Or 30 very different customers and a single codebase) - Rob Ashton - DeveloperDeveloperDevel</A> from <A href="http://vimeo.com/user3077884">Phil Winstanley</A> on <A href="http://vimeo.com/">Vimeo</A>.</P>
			
			<P class="postfoot">		
				posted @ <A href="http://codeofrob.com/archive/2010/02/05/multi-tenancy-in-asp.net-mvc-ddd8-video.aspx" title="Permanent link to this post">Friday, February 05, 2010 9:52 AM</A> | <A href="http://codeofrob.com/archive/2010/02/05/multi-tenancy-in-asp.net-mvc-ddd8-video.aspx#feedback" title="comments, pingbacks, trackbacks" class="comments">Feedback (2)</A>
			</P>
		</DIV>
	

	
		
<P class="date">
	Thursday, February 04, 2010		  
	<A id="_1edc5002b43f_HomePageDays_DaysList_ctl03_DayItem_ImageLink" title="Click to see entries for this day." href="http://codeofrob.com/archive/2010/02/04.aspx" style="display:inline-block;border-width:0px;height:15px;width:12px;">#</A>
</P>


		<DIV class="post">
			<H2><A id="_1edc5002b43f_HomePageDays_DaysList_ctl03_DayItem_DayList_ctl00_TitleUrl" title="Click To View Entry." href="http://codeofrob.com/archive/2010/02/04/multi-tenancy-in-asp.net-mvc-breaking-it-down.aspx">Multi-tenancy in ASP.NET MVC - Breaking it down</A></H2>
			
			<P><FONT face="Arial"><STRONG>Previous entries in the series</STRONG></FONT></P>
<UL>
    <LI><A href="http://codeofrob.com/archive/2010/02/01/multi-tenancy-in-asp.net-mvc-why-do-we-want-to.aspx">Why do we want multi-tenancy</A></LI>
</UL>
<P><FONT face="Arial">In the last entry, we covered the basics of what I consider multi-tenancy to be, and why we might perhaps want to write our ASP.NET MVC web application with multi-tenancy in mind.</FONT></P>
<P><FONT face="Arial">The "ASP.NET MVC" component&nbsp;(or front-end) of your multi-tenant application probably only covers a small fraction of your entire codebase but is also the first and often only contact your customer has with your application, so ends up being their first point of call when asking for changes to your system. </FONT></P>
<P><FONT face="Arial">It also ends up being the most awkward part of to change because that's the nature of using a framework like ASP.NET MVC which is designed primarily to be used in single-tenant scenarios.</FONT></P>
<P><FONT face="Arial">Before getting into the technical details of how I implement a multi-tenant app in this environment, it's worth covering the components of our chosen framework and establishing where to start.</FONT></P>
<P><FONT face="Arial"><STRONG>Disclaimer</STRONG>: This will not be an overly technical post,&nbsp; and I apologise to those that want me to just jump right in and start talking code.&nbsp; This will be the last introductory post in the series - promise :)</FONT></P>
<P><FONT face="Arial">Getting to the point,&nbsp; this is how I personally split up the MVC application concepts into themes and modules.</FONT></P>
<P>
</P><TABLE border="1" cellspacing="1" summary="" cellpadding="1" width="400">
    <TBODY>
        <TR>
            <TD><STRONG>Themes</STRONG></TD>
            <TD><STRONG>Modules</STRONG></TD>
        </TR>
        <TR>
            <TD>CSS</TD>
            <TD>Views</TD>
        </TR>
        <TR>
            <TD>Theme-specific images</TD>
            <TD>Partial Views</TD>
        </TR>
        <TR>
            <TD>Theme-specific JavaScript</TD>
            <TD>Controller actions</TD>
        </TR>
        <TR>
            <TD>Master pages</TD>
            <TD>Module-specific JavaScript</TD>
        </TR>
    </TBODY>
</TABLE>

<P><FONT face="Arial"><STRONG>JavaScript</STRONG></FONT></P>
<P><FONT face="Arial">Whether we like it or not, designers like to deploy JavaScript alongside their designs these days, most notably with libraries such as <A href="http://www.emblematiq.com/lab/niceforms/">Niceforms</A> and its associated brethren. <BR>
It therefore pays to&nbsp; make the distinction between functional and theme-specific JavaScript and allow both modules and themes to provide their own collections of scripts.</FONT></P>
<P><FONT face="Arial">For shared libraries like jQuery etc, they can be made available as part of the core application, and modules and themes can take it for granted that it will be available for their use.<BR>
</FONT></P>
<P><FONT face="Arial"><STRONG>CSS</STRONG></FONT><FONT face="Arial">
</FONT></P><FONT face="Arial"><P><FONT face="Arial">Most theming can be achieved by switching style sheets if the mark-up has been designed properly and this is an obvious candidate for theming support. Switching between style sheets is a trivial and well documented operation and can easily be achieved through the use of a HtmlHelper extension method.</FONT></P>
<P><FONT face="Arial">I'll assume I don't need to write an entry on achieving the switching between either the CSS or JavaScript, although as with anything if prompted I'll cover the subject.</FONT></P>
<P><FONT face="Arial"><STRONG>Master Pages</STRONG><BR>
</FONT></P>
<P><FONT face="Arial">Sometimes the client wishes for major structural changes to the web application, and CSS changes may not be enough. For this we have master pages although because of the increased cost of having to maintain the extra mark-up&nbsp; they should probably only be used as a last resort.</FONT></P>
<P><FONT face="Arial">I wrote a blog entry about the various methods of <A href="http://codeofrob.com/archive/2009/11/01/dynamically-switching-between-master-pages-in-asp.net-mvc.aspx">switching between the master pages at runtime</A> a while ago so I won't be covering that again.</FONT></P>
<P><FONT face="Arial">For my purposes over the coming posts, I assume that the structure of the master page IS a part of theming, and that we are using sub-master pages and separate child master pages across the site for different interfaces. I therefore use the OnPreInit method mentioned in the above entry for the greatest amount of flexibility.</FONT></P>
<P><FONT face="Arial"><STRONG>Views + Partial Views</STRONG></FONT></P>
<FONT face="Arial"><FONT face="Arial">
<P><FONT face="Arial">New modules will require&nbsp; either new views or the ability to override existing views, and thus I consider views to be a functional aspect of the application.</FONT></P>
<P><FONT face="Arial">I have seen views and partial views used for theming in frameworks or products where actual functional module support was highly limited. I assume a multi-tenant system *does* have decent functional module support and thus they are part of modules and not theming.</FONT></P>
<P><FONT face="Arial">Mark-up in the views should simply be kept as theme-agnostic as possible, as themes won't be able to change it.</FONT></P>
<P><FONT face="Arial">I'll be covering this in this series, utilising&nbsp; the power of a custom view engine to find and replace views based on the currently active modules.</FONT></P>
<P><STRONG>Controller Actions</STRONG></P>
<P><FONT face="Arial">These are obviously an important part of adding functionality to the application through the use of modules.</FONT></P>
<P><FONT face="Arial">Because we have the ability to not only add new&nbsp; views, but to modify them - we also need the ability to add new actions and indeed replace existing actions (as modified views may accept modified view models!)</FONT></P>
<P><FONT face="Arial">This is probably the hardest problem to solve and there are a few ways of solving it,&nbsp; this too will be coming in this series - using custom controller factories to compose or locate controllers dynamically based on the currently active modules.<BR>
</FONT></P>
<P><FONT face="Arial"><STRONG>In Summary</STRONG></FONT></P>
<P><FONT face="Arial">We have covered the components of an MVC web application and established where the boundaries lie between modules and theming support.</FONT></P>
<P><FONT face="Arial">In the next entry I'll be covering how to utilise view engines to achieve the per-module views and partial views.<BR>
</FONT></P>
<P><BR>
&nbsp;</P>
</FONT><FONT face="Arial"><BR>
</FONT></FONT></FONT><P></P>
			
			<P class="postfoot">		
				posted @ <A href="http://codeofrob.com/archive/2010/02/04/multi-tenancy-in-asp.net-mvc-breaking-it-down.aspx" title="Permanent link to this post">Thursday, February 04, 2010 11:19 PM</A> | <A href="http://codeofrob.com/archive/2010/02/04/multi-tenancy-in-asp.net-mvc-breaking-it-down.aspx#feedback" title="comments, pingbacks, trackbacks" class="comments">Feedback (5)</A>
			</P>
		</DIV>
	

	
		
<P class="date">
	Monday, February 01, 2010		  
	<A id="_1edc5002b43f_HomePageDays_DaysList_ctl04_DayItem_ImageLink" title="Click to see entries for this day." href="http://codeofrob.com/archive/2010/02/01.aspx" style="display:inline-block;border-width:0px;height:15px;width:12px;">#</A>
</P>


		<DIV class="post">
			<H2><A id="_1edc5002b43f_HomePageDays_DaysList_ctl04_DayItem_DayList_ctl00_TitleUrl" title="Click To View Entry." href="http://codeofrob.com/archive/2010/02/01/multi-tenancy-in-asp.net-mvc-why-do-we-want-to.aspx">Multi-tenancy in ASP.NET MVC - Why do we want it?</A></H2>
			
			<P><FONT face="Arial">I'll be gratuitously "borrowing" a lot&nbsp; of material from my DDD8 slides in this post, it seemed like the right thing to do given that this series is a write-up and then continuation of that talk.</FONT></P>
<FONT face="Arial">
<P><FONT face="Arial">When dealing with more than one customer in the desktop market, it is customary to have a single product which is extendable through the use of plug-ins and an API, and often you can leave it up to your consumer base to write those plug-ins and add to your product in a manner they see fit.</FONT></P>
<P><FONT face="Arial">In the web world it's a bit different, and you don't typically get that kind of behaviour (Facebook applications may or may not count, depending on how you look at it).</FONT></P>
<P><FONT face="Arial"><BR>
In a simple world, you'll have a single product which is used directly off the shelf by multiple customers:</FONT></P>
<P><IMG alt="Single product" src="./Rob Ashton_files/single_product.png"></P>
<P><FONT face="Arial">When building web applications for a varied and paying customer base, It is likely that you have customers that are fickle and will want things done their way. </FONT></P>
<P><FONT face="Arial">It often does not make business sense to turn good business down, and the business is what pays the hungry developer and thus when you finally get a customer who wants things done differently,&nbsp; the business tells the developer to jump and the business's required response is the proverbial "how high?".</FONT></P>
<P><FONT face="Arial">Consider the above diagram then, and imagine Customer A asking for something 'just a little bit different' and think about what your options could be.</FONT></P>
<P><FONT face="Arial">We'll get the obvious dusted out of the way first:<BR>
</FONT></P>
<P><IMG alt="if( featureIsEnabled....)" src="./Rob Ashton_files/feature_code.png"></P>
<P><FONT face="Arial">When I switched to the above code as a slide in my multi-tenant talk, I was greeted with laughter, but we've all known products which have ended up with such delightful nuggets in them. <BR>
It's blindingly obvious that it's not the right solution, and that as you progress down the route of making further modifications for either Customer A, B or C you'll end up with an un-maintainable mess of switches and flags. 'Nuff said.</FONT></P>
<FONT face="Arial">
<P><BR>
</P>
<P>You could then decide that you're going to keep that customer as a new product in its own right - that would remove the need for all those on-off switches.</P>
<P><FONT face="Arial"><FONT face="Arial"><IMG alt="A bespoke copy" src="./Rob Ashton_files/bespoke_copy.png"><BR>
</FONT></FONT></P>
<P><FONT face="Arial"><FONT face="Arial"><FONT face="Arial">This should very obviously be a big no-no as maintaining that then bespoke product and keeping it up to date with any changes then made to your core product is going to be nothing more than a giant headache. <BR>
As you get more customers, the number of developers you'll need to hire will increase almost in direct proportion to the number of codebases you have to maintain!&nbsp; (Again, I've seen this done - so don't think I'm just pointing out the obvious for the sake of it)</FONT></FONT></FONT></P>
<P><FONT face="Arial">Let's move onto the more-often used approach, of branching from a base product for your different needs, and utilising the power of a source control system to keep changes in sync between your code-bases.<BR>
</FONT></P>
<P><FONT face="Arial"><IMG alt="Branching as an alternative" src="./Rob Ashton_files/bespoke_branch.png"></FONT></P>
<P><FONT face="Arial">Customer A can be kept up to date by merging changes from the core product, and Customer B/C can get additional features from Customer A's branch if and when they desire it.</FONT></P>
<P><FONT face="Arial">At first glances, it seems like this solution fits our needs - and indeed it can work well in a lot of given&nbsp; scenarios. The problem comes when you scale this solution up to more than this small example - as few of us are (un)lucky enough to&nbsp;be able to deal with only three customers and remain financially viable!</FONT></P>
<P><FONT face="Arial">Here is a small example of 30 customers sharing 15 code-bases!<BR>
</FONT></P>
<P><FONT face="Arial"><IMG alt="A mess of branching dependencies" src="./Rob Ashton_files/bespoke_mess.png"></FONT></P>
<FONT face="Arial">
<P><FONT face="Arial">Yowsers! <BR>
How do you keep track of who has what features? <BR>
How do you test all of those different branches of code? <BR>
How do you deploy those branches of code?<BR>
How do you make a new version of the product and serve it to a customer?<BR>
How many developers do you need to manage that process?</FONT></P>
<P><FONT face="Arial">It's never as simple as it looks, and you end up with not only the above problems, but you end up with the additional problems of what happens when a branch becomes radically different and you're unable to merge changes around.<BR>
</FONT><FONT face="Arial"><FONT face="Arial">There is too much developer interaction here - and your skilled staff end up having to spend most of their time creating new branches/pushing changes around instead of spending their time doing what they're actually trained to do - writing code.&nbsp;</FONT></FONT></P>
<P><FONT face="Arial"><FONT face="Arial"><BR>
Adding a new customer shouldn't be about changing code, it should be about manipulating configuration, and modifying a customer shouldn't be about changing code, it should also be about manipulating configuration.&nbsp;<BR>
</FONT></FONT></P>
<P><FONT face="Arial">In other words, problems should only be solved once - and configuration should be used to give or take features to and from customers.<BR>
</FONT><FONT face="Arial"><FONT face="Arial"></FONT></FONT></P><FONT face="Arial">
<FONT face="Arial"><FONT face="Arial"><STRONG>
<H3><FONT face="Arial"><FONT face="Arial"><STRONG>Enter multi-tenancy...</STRONG></FONT></FONT></H3>
</STRONG></FONT>
<P><FONT face="Arial">The core concept of a well written multi-tenant application is that you should have a single code base, and a number of configurations - where each configuration tells the runtime what functionality should be available and what the look/feel should be.</FONT></P>
<P><FONT face="Arial">Before continuing, I'd like to define a few of the terms I'll be using throughout this series of blog entries.</FONT></P>
<UL>
    <LI><FONT face="Arial">Module: A discrete set of functionality</FONT> </LI>
    <LI><FONT face="Arial">Theme: The look and feel</FONT> </LI>
    <LI><FONT face="Arial">Configuration:&nbsp; A selection of modules, and a single theme</FONT> </LI>
</UL>
<FONT face="Arial">
<P><FONT face="Arial">This is a personal leaning, and I know that some people would set this up differently. Each to their own, we've got to draw lines somewhere!</FONT></P>
<P><FONT face="Arial"><BR>
</FONT><FONT face="Arial"><FONT face="Arial">Anyway - as far as I'm concerned, Multi-tenancy gives us some of the following benefits:</FONT> </FONT></P>
<P><FONT face="Arial">Deployment becomes a simple case of installing your application onto a server, and setting up the configurations for that application.</FONT></P>
<P><FONT face="Arial">When a request comes in, context is determined by some means (auth credentials, the hostname, whatever), and the relevant configuration is selected from that context. </FONT></P>
<P><FONT face="Arial"><IMG alt="A single server serving multiple customers" src="./Rob Ashton_files/multi_tenant_single.png"></FONT></P>
<P><FONT face="Arial"><FONT face="Arial">This is a very simple way of working, and if you design your application correctly, it becomes obvious that your hosting/maintenance costs can be reduced.</FONT></FONT></P>
<P><FONT face="Arial">You can have multiple servers with the exact same codebase installed on them, and with all the configurations available to them (In other words, identical).&nbsp; Scaling up becomes a simple matter of adding more of those identical servers - and if you're really smart you can load balance across your VPSs and power them up/down as required. <BR>
You no longer need to worry (too much) about the fact that you have all of those customers, and you can concentrate on the health of your system as a whole.<BR>
</FONT></P>
<P><IMG alt="Load balanced multi-tenant system" src="./Rob Ashton_files/multi_tenant_balanced.png"></P>
<P><BR>
&nbsp;Some more benefits:</P>
<UL>
    <LI><FONT face="Arial">You add a feature once, and deploy it to your customers through the use of configuration</FONT> </LI>
    <LI><FONT face="Arial">You can fix a bug, and deploy the fix once&nbsp;</FONT> </LI>
    <LI><FONT face="Arial">&nbsp;Potentially easy management of your infrastructure (This actually&nbsp;comes through good design, and multi-tenancy just aids in that goal)</FONT> </LI>
    <LI><FONT face="Arial">Developers get to spend their time coding new features/fixing bugs</FONT> </LI>
    <LI><FONT face="Arial">New customers can have a site created in minutes and start to give feedback immediately</FONT> </LI>
</UL>
<P><FONT face="Arial">Everybody is a winner and we all get to go home and have pie and punch.</FONT></P>
<P><FONT face="Arial">In the next entry, things will hot up as I'll start to look at ASP.NET MVC and determine the components that we can use to aid us in creating a multi-tenant application.<BR>
</FONT></P>
</FONT></FONT>
<P>&nbsp;</P>
</FONT></FONT></FONT>
			
			<P class="postfoot">		
				posted @ <A href="http://codeofrob.com/archive/2010/02/01/multi-tenancy-in-asp.net-mvc-why-do-we-want-to.aspx" title="Permanent link to this post">Monday, February 01, 2010 10:10 PM</A> | <A href="http://codeofrob.com/archive/2010/02/01/multi-tenancy-in-asp.net-mvc-why-do-we-want-to.aspx#feedback" title="comments, pingbacks, trackbacks" class="comments">Feedback (5)</A>
			</P>
		</FONT></DIV><FONT face="Arial">
	

	
		
<P class="date">
	Sunday, January 31, 2010		  
	<A id="_1edc5002b43f_HomePageDays_DaysList_ctl05_DayItem_ImageLink" title="Click to see entries for this day." href="http://codeofrob.com/archive/2010/01/31.aspx" style="display:inline-block;border-width:0px;height:15px;width:12px;">#</A>
</P>


		<DIV class="post">
			<H2><A id="_1edc5002b43f_HomePageDays_DaysList_ctl05_DayItem_DayList_ctl00_TitleUrl" title="Click To View Entry." href="http://codeofrob.com/archive/2010/01/31/multi-tenancy-and-asp.net-mvc.aspx">Multi-tenancy and ASP.NET MVC</A></H2>
			
			<P><FONT face="Arial">I spoke about this chestnut briefly at DDD8,&nbsp;and I want to start expanding on the subject.</FONT></P>
<P><FONT face="Arial">My plan is over the next few weeks to start talking more about multi-tenancy in our web-apps, and to get everybody else doing the same - speaking to other developers after my talk I realised that we're not alone, people are working on solutions but they're just not talking about it.</FONT></P>
<P><FONT face="Arial">By getting some dialogue going, I hope we can generate a public description of what is good and what is bad about attempting to build multi-tenant applications on top of ASP.NET MVC, and what our possible avenues of achieving this can be.<BR>
</FONT></P>
<FONT face="Arial">
<P><FONT face="Arial">The suggested topics I aim to cover in this series of blog entries will (to begin with) be somewhere along these lines: (As I've already written most of the material!)</FONT></P>
<UL>
    <LI><FONT face="Arial">What is multi-tenancy and why do we want it?</FONT></LI>
    <LI><FONT face="Arial">The building blocks of a multi-tenant application in ASP.NET MVC</FONT></LI>
    <FONT face="Arial">
    <LI>How I integrated MvcEx into NerdDinner to give it some multi-tenant capabilities</LI>
    </FONT></UL>
    <P>If there is anything else you think I should cover as part of this series, then let me know by either Twitter or the comments field below.</P>
    <P><FONT face="Arial">I am loathe to go into detail on what I consider to be the other 90% of the multi-tenancy story - your domain, the rest of your codebase, managing your databases/configurations etc, as you can get all of that information from people who are far more versed in the subject than I.</FONT></P>
    <P><FONT face="Arial">But, if pushed on a particular subject I guess I will describe how I deal with those issues in the codebases I have control over, and you'll have to take it (as you should take anything written on these pages) with a pinch of salt.<BR>
    </FONT></P>
    </FONT>
			
			<P class="postfoot">		
				posted @ <A href="http://codeofrob.com/archive/2010/01/31/multi-tenancy-and-asp.net-mvc.aspx" title="Permanent link to this post">Sunday, January 31, 2010 8:16 PM</A> | <A href="http://codeofrob.com/archive/2010/01/31/multi-tenancy-and-asp.net-mvc.aspx#feedback" title="comments, pingbacks, trackbacks" class="comments">Feedback (4)</A>
			</P>
		</DIV>
	
		<DIV class="post">
			<H2><A id="_1edc5002b43f_HomePageDays_DaysList_ctl05_DayItem_DayList_ctl01_TitleUrl" title="Click To View Entry." href="http://codeofrob.com/archive/2010/01/31/ddd8-post-event.aspx">DDD8 - Post Event</A></H2>
			
			<P>Wow.</P>
<P>That was a wonderful day, and the sessions I ended up going to were:</P>
<UL>
    <LI>@ICooper's session on MVC Architecture (preaching the choir but good to be re-assured) </LI>
    <LI>@robashton's session on Multi-tenant ASP.NET MVC (obviously) </LI>
    <LI>@holytshirt's session on Mono (Good to see this project is advancing well) </LI>
    <LI>@garyshort's session on JClosure (Lovely!) </LI>
    <LI>@blowdart's session on the crystal maze </LI>
</UL>
<P>The last session was interrupted constantly by the MVPs and associated crowd&nbsp;because Barry is leaving the UK and heading off to MS to learn how to spell :)</P>
<P>There isn't much specifically to talk about really, it's been said by everybody. The event was well organised, the post-event meal was also surprisingly kept in control and the post-event drinks ... well I'd had no sleep the previous night so I left early. I believe fun was had by all however.</P>
<P>My talk? I think it went okay - I was a bit nervous presenting on a subject that doesn't get talked about openly all that much, and worried the audience might throw a few massive spanners in the works (although I am open to change, I don't want to be told outright I'm wrong in the middle of a talk!)</P>
<P>I spoke a bit fast, and had a minor emergency at the start when realising I needed an adapter for my laptop, but was saved by the team whose job it was to babysit me and massive thanks goes to them for saving my presentation :)</P>
<P>My slides can be found <A href="http://fear.the.codeofrob.com/ddd8slides.zip">here</A>, and demo code can be found <A href="http://fear.the.codeofrob.com/ddd8code.zip">here</A>.</P>
<P>The nerd dinner multi-tenant example can be found on the MvcEx codeplex site (<A href="http://mvcex.codeplex.com/">http://mvcex.codeplex.com</A>) - but I'll be hoping to improve it beyond its "suitable for demo" stage and do some blog entries on the rationale behind some of the decisions/concepts found within over the coming weeks.</P>
<P>&nbsp;It's not perfect, it's not anywhere near done and as I keep telling people, it's just for reference purposes (at present), feel free to make suggestions, contributions and etc and we'll get there in the end. Multi-tenancy is the future you know?</P>
			
			<P class="postfoot">		
				posted @ <A href="http://codeofrob.com/archive/2010/01/31/ddd8-post-event.aspx" title="Permanent link to this post">Sunday, January 31, 2010 6:01 PM</A> | <A href="http://codeofrob.com/archive/2010/01/31/ddd8-post-event.aspx#feedback" title="comments, pingbacks, trackbacks" class="comments">Feedback (0)</A>
			</P>
		</DIV>
	

	
		
<P class="date">
	Friday, December 18, 2009		  
	<A id="_1edc5002b43f_HomePageDays_DaysList_ctl06_DayItem_ImageLink" title="Click to see entries for this day." href="http://codeofrob.com/archive/2009/12/18.aspx" style="display:inline-block;border-width:0px;height:15px;width:12px;">#</A>
</P>


		<DIV class="post">
			<H2><A id="_1edc5002b43f_HomePageDays_DaysList_ctl06_DayItem_DayList_ctl00_TitleUrl" title="Click To View Entry." href="http://codeofrob.com/archive/2009/12/18/nunit-2.5.3-and-setuiculture.aspx">NUnit 2.5.3 and [SetUICulture]</A></H2>
			
			<P>I can't for the life of me get this to work, and [SetCulture] appears to be working fine - so I can only assume it's a bug.</P>
<P>I've posted to the mailing list and started off the process of working out whether it is a bug or not, but for now - I need to have my tests running&nbsp; in the right culture, without any side effects on the other tests once a test has been complete.</P>
<P>Here is my hack to do that:</P>
<DIV id="highlighter_868333" class="syntaxhighlighter  "><DIV class="bar"><DIV class="toolbar"><A href="http://codeofrob.com/#viewSource" title="view source" style="width: 16px; height: 16px; " class="item viewSource">view source</A><A href="http://codeofrob.com/#printSource" title="print" style="width: 16px; height: 16px; " class="item printSource">print</A><A href="http://codeofrob.com/#about" title="?" style="width: 16px; height: 16px; " class="item about">?</A></DIV></DIV><DIV class="lines"><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>01</CODE></TD><TD class="content"><CODE class="keyword">public</CODE> <CODE class="keyword">class</CODE> <CODE class="plain">CultureContext : IDisposable</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>02</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;</CODE><CODE class="plain">{</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>03</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="keyword">private</CODE> <CODE class="plain">CultureInfo mOldCulture;</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>04</CODE></TD><TD class="content">&nbsp;</TD></TR></TBODY></TABLE></DIV><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>05</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="keyword">public</CODE> <CODE class="plain">CultureContext(String cultureName)</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>06</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="plain">{</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>07</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="plain">mOldCulture = System.Threading.Thread.CurrentThread.CurrentUICulture;</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>08</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="plain">System.Threading.Thread.CurrentThread.CurrentUICulture = </CODE><CODE class="keyword">new</CODE> <CODE class="plain">CultureInfo(cultureName);</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>09</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="plain">}</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>10</CODE></TD><TD class="content">&nbsp;</TD></TR></TBODY></TABLE></DIV><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>11</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="keyword">public</CODE> <CODE class="keyword">void</CODE> <CODE class="plain">Dispose()</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>12</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="plain">{</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>13</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="plain">System.Threading.Thread.CurrentThread.CurrentUICulture = mOldCulture;</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>14</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="plain">}</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>15</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;</CODE><CODE class="plain">}</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<P>The usage is as follows, within a test do:</P>
<DIV id="highlighter_473332" class="syntaxhighlighter  "><DIV class="bar"><DIV class="toolbar"><A href="http://codeofrob.com/#viewSource" title="view source" style="width: 16px; height: 16px; " class="item viewSource">view source</A><A href="http://codeofrob.com/#printSource" title="print" style="width: 16px; height: 16px; " class="item printSource">print</A><A href="http://codeofrob.com/#about" title="?" style="width: 16px; height: 16px; " class="item about">?</A></DIV></DIV><DIV class="lines"><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>1</CODE></TD><TD class="content"><CODE class="keyword">using</CODE> <CODE class="plain">(</CODE><CODE class="keyword">new</CODE> <CODE class="plain">CultureContext(</CODE><CODE class="string">"fr-FR"</CODE><CODE class="plain">))</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>2</CODE></TD><TD class="content"><CODE class="plain">{</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>3</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="comments">// Test code here</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>4</CODE></TD><TD class="content"><CODE class="plain">}</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<P>This will ensure that your test runs with the ui culture of "fr-FR", before resetting it to whatever it was before the test began. Not pretty, but it'll do until I work out if it's user error or a bug preventing NUnit from doing what I want it to do!</P>
			
			<P class="postfoot">		
				posted @ <A href="http://codeofrob.com/archive/2009/12/18/nunit-2.5.3-and-setuiculture.aspx" title="Permanent link to this post">Friday, December 18, 2009 2:28 PM</A> | <A href="http://codeofrob.com/archive/2009/12/18/nunit-2.5.3-and-setuiculture.aspx#feedback" title="comments, pingbacks, trackbacks" class="comments">Feedback (0)</A>
			</P>
		</DIV>
	

	
		
<P class="date">
	Friday, December 11, 2009		  
	<A id="_1edc5002b43f_HomePageDays_DaysList_ctl07_DayItem_ImageLink" title="Click to see entries for this day." href="http://codeofrob.com/archive/2009/12/11.aspx" style="display:inline-block;border-width:0px;height:15px;width:12px;">#</A>
</P>


		<DIV class="post">
			<H2><A id="_1edc5002b43f_HomePageDays_DaysList_ctl07_DayItem_DayList_ctl00_TitleUrl" title="Click To View Entry." href="http://codeofrob.com/archive/2009/12/11/ddd8.aspx">DDD8</A></H2>
			
			<P>Developer Developer Developer Day 8 has been announced, and I'm going to propose a couple of sessions, and hopefully use one of them to talk about an open source project I've been cooking for a month or so now :)</P>

<P>Click <A href="http://developerdeveloperdeveloper.com/ddd8/Default.aspx">here</A> for details!</P>
			
			<P class="postfoot">		
				posted @ <A href="http://codeofrob.com/archive/2009/12/11/ddd8.aspx" title="Permanent link to this post">Friday, December 11, 2009 11:56 AM</A> | <A href="http://codeofrob.com/archive/2009/12/11/ddd8.aspx#feedback" title="comments, pingbacks, trackbacks" class="comments">Feedback (0)</A>
			</P>
		</DIV>
	

	
		
<P class="date">
	Sunday, November 01, 2009		  
	<A id="_1edc5002b43f_HomePageDays_DaysList_ctl08_DayItem_ImageLink" title="Click to see entries for this day." href="http://codeofrob.com/archive/2009/11/01.aspx" style="display:inline-block;border-width:0px;height:15px;width:12px;">#</A>
</P>


		<DIV class="post">
			<H2><A id="_1edc5002b43f_HomePageDays_DaysList_ctl08_DayItem_DayList_ctl00_TitleUrl" title="Click To View Entry." href="http://codeofrob.com/archive/2009/11/01/dynamically-switching-between-master-pages-in-asp.net-mvc.aspx">Dynamically Switching between Master Pages in ASP.NET MVC</A></H2>
			
			<P><FONT face="Arial">When developing a web application that's designed for re-deployment in a number of different environments (such as a blogging engine/forum system/etc), it's helpful to be able to re-skin and re-structure&nbsp; the application without modifying any application files.</FONT></P>
<P><FONT face="Arial">To a very large extent, this can be achieved through the use of an alternative set of cascading style sheets and this works for a large number of people. However if you take a look on programming websites such as Stack Overflow the question of how to change the master page at runtime is still an oft-asked one.</FONT></P>
<P><FONT face="Arial">In ASP.NET Forms the solution was to simply subclass Page, override PreInit and change the MasterPage property based on some application variable. The master page specified by the corresponding ASPX file could even be read out and used to determine which themed master page to use. (A useful function if you had multiple master pages used throughout the site).</FONT></P>
<FONT face="Arial">
<DIV id="highlighter_503341" class="syntaxhighlighter  "><DIV class="bar"><DIV class="toolbar"><A href="http://codeofrob.com/#viewSource" title="view source" style="width: 16px; height: 16px; " class="item viewSource">view source</A><A href="http://codeofrob.com/#printSource" title="print" style="width: 16px; height: 16px; " class="item printSource">print</A><A href="http://codeofrob.com/#about" title="?" style="width: 16px; height: 16px; " class="item about">?</A></DIV></DIV><DIV class="lines"><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>01</CODE></TD><TD class="content"><CODE class="keyword">public</CODE> <CODE class="keyword">class</CODE> <CODE class="plain">ThemedPage : Page</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>02</CODE></TD><TD class="content"><CODE class="plain">{</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>03</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="keyword">protected</CODE> <CODE class="keyword">override</CODE> <CODE class="keyword">void</CODE> <CODE class="plain">OnPreInit(EventArgs e)</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>04</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="plain">{</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>05</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="keyword">if</CODE> <CODE class="plain">(</CODE><CODE class="keyword">this</CODE><CODE class="plain">.MasterPageFile.EndsWith(</CODE><CODE class="string">"MasterOne.Master"</CODE><CODE class="plain">, StringComparison.InvariantCultureIgnoreCase))</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>06</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="plain">{</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>07</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="comments">// TODO: Some logic here to find the right master page based on theme!</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>08</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="keyword">this</CODE><CODE class="plain">.MasterPageFile = </CODE><CODE class="string">"/Views/Shared/MasterThree.Master"</CODE><CODE class="plain">;</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>09</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="plain">}</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>10</CODE></TD><TD class="content">&nbsp;</TD></TR></TBODY></TABLE></DIV><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>11</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="keyword">base</CODE><CODE class="plain">.OnPreInit(e);</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>12</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="plain">}</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>13</CODE></TD><TD class="content"><CODE class="plain">}</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<P><FONT face="Arial">In ASP.NET MVC the playing field has been altered somewhat, and there are a number of options to consider when creating an application with dynamic master pages.</FONT></P>
<P><FONT face="Arial">The most championed solutions found on the afore-mentioned programming websites are to either pass the master page name into the View() method when returning a ViewResult , or to create a custom view engine which specifies the master page.</FONT></P>
<H5>Passing the master page name into the View method</H5>
<FONT face="Arial">
<P><FONT face="Arial">When returning a ViewResult via any of the built in methods (Controller.View()) the option is provided to pass in the name of as master page - and the default view engine will look for a master page with that name in the ~/Views/Shared directory.</FONT></P>
<P><FONT face="Arial">Alternatively you can modify the ViewResult&nbsp; before returning it from your action method - which is probably the preferred option in most cases&nbsp; as you probably don't want to be passing in the name of the view all the time too.</FONT></P>
<FONT face="Arial">
<DIV id="highlighter_741309" class="syntaxhighlighter  "><DIV class="bar"><DIV class="toolbar"><A href="http://codeofrob.com/#viewSource" title="view source" style="width: 16px; height: 16px; " class="item viewSource">view source</A><A href="http://codeofrob.com/#printSource" title="print" style="width: 16px; height: 16px; " class="item printSource">print</A><A href="http://codeofrob.com/#about" title="?" style="width: 16px; height: 16px; " class="item about">?</A></DIV></DIV><DIV class="lines"><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>1</CODE></TD><TD class="content"><CODE class="keyword">public</CODE> <CODE class="plain">ActionResult SomePage()</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>2</CODE></TD><TD class="content"><CODE class="plain">{</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>3</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="keyword">return</CODE> <CODE class="plain">View(</CODE><CODE class="string">"SomePage"</CODE><CODE class="plain">, </CODE><CODE class="string">"MasterTwo"</CODE><CODE class="plain">);</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>4</CODE></TD><TD class="content"><CODE class="plain">}</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV>
</FONT><FONT face="Arial">
<DIV id="highlighter_931584" class="syntaxhighlighter  "><DIV class="bar"><DIV class="toolbar"><A href="http://codeofrob.com/#viewSource" title="view source" style="width: 16px; height: 16px; " class="item viewSource">view source</A><A href="http://codeofrob.com/#printSource" title="print" style="width: 16px; height: 16px; " class="item printSource">print</A><A href="http://codeofrob.com/#about" title="?" style="width: 16px; height: 16px; " class="item about">?</A></DIV></DIV><DIV class="lines"><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>1</CODE></TD><TD class="content"><CODE class="keyword">public</CODE> <CODE class="plain">ActionResult SomeOtherPage()</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>2</CODE></TD><TD class="content"><CODE class="plain">{</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>3</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="plain">var view = View();</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>4</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="plain">view.MasterName = </CODE><CODE class="string">"MasterTwo"</CODE><CODE class="plain">;</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>5</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="keyword">return</CODE> <CODE class="plain">view;</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>6</CODE></TD><TD class="content"><CODE class="plain">}</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<P>&nbsp;</P>
<P><FONT face="Arial">It is obvious however from these two examples that this is&nbsp; an un-maintainable solution; having to specify the master page on every single action is going to get tedious and if you decide to change this solution for a different one later on you're going to have to go back and modify all of those method calls.</FONT></P>
<P><FONT face="Arial">This leads us nicely on to the next possible solution, of having this work done for us globally by the controller.</FONT></P>
</FONT><FONT face="Arial">It would be possible to pass in the name of a different master page by using a helper somewhere that knew the details of the current theme and therefore the names of the master pages it uses.</FONT></FONT>
<H5>Overriding OnActionExecuted on the Controller class</H5>
<P><FONT face="Arial"><FONT face="Arial">Rather than specify the master page name as the result of every single Action method, you could either create a base controller or override OnActionExecuted on a case-by-case basis.</FONT></FONT></P>
<P><FONT face="Arial">OnActionExecuted gives you a chance to modify the result after an action has been invoked, which means you can take the ViewResult which was returned by an action and set the MasterName on it in this location.</FONT></P>
<P><FONT face="Arial">You could even detect whether the MasterName property had been set, and not override it if an action has already explicitly set it.</FONT></P>
<FONT face="Arial">
<DIV id="highlighter_984033" class="syntaxhighlighter  "><DIV class="bar"><DIV class="toolbar"><A href="http://codeofrob.com/#viewSource" title="view source" style="width: 16px; height: 16px; " class="item viewSource">view source</A><A href="http://codeofrob.com/#printSource" title="print" style="width: 16px; height: 16px; " class="item printSource">print</A><A href="http://codeofrob.com/#about" title="?" style="width: 16px; height: 16px; " class="item about">?</A></DIV></DIV><DIV class="lines"><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>1</CODE></TD><TD class="content"><CODE class="keyword">protected</CODE> <CODE class="keyword">override</CODE> <CODE class="keyword">void</CODE> <CODE class="plain">OnActionExecuted(ActionExecutedContext filterContext)</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>2</CODE></TD><TD class="content"><CODE class="plain">{</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>3</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="plain">var action = filterContext.Result </CODE><CODE class="keyword">as</CODE> <CODE class="plain">ViewResult;</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>4</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="keyword">if</CODE> <CODE class="plain">(action != </CODE><CODE class="keyword">null</CODE> <CODE class="plain">&amp;&amp; String.IsNullOrEmpty(action.MasterName))</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>5</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="plain">{</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>6</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="plain">action.MasterName = </CODE><CODE class="string">"MasterThree"</CODE><CODE class="plain">;</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>7</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="plain">}</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>8</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="keyword">base</CODE><CODE class="plain">.OnActionExecuted(filterContext);</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>9</CODE></TD><TD class="content"><CODE class="plain">}</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV>
</FONT>
<P><FONT face="Arial">This gives you the power of being able to specify a master page per controller and still have the flexibility of overriding it per action. </FONT></P>
<P><FONT face="Arial">&nbsp;It's still not ideal though, there is a certain amount of manual work required in doing this that you wouldn't want if you were going to be developing a large system with a substantial number of controllers or actions.<BR>
</FONT></P>
<H5>Custom View Engine</H5>
<P><FONT face="Arial">Moving further up the processing chain, the Custom ViewEngine allows the application to specify the master file for any request.</FONT></P>
<P><FONT face="Arial">For the purposes of this example I'll derive my custom view engine from the standard built-in WebFormViewEngine as it requires the least work to get up and running.</FONT></P>
<FONT face="Arial">
<DIV id="highlighter_346415" class="syntaxhighlighter  "><DIV class="bar"><DIV class="toolbar"><A href="http://codeofrob.com/#viewSource" title="view source" style="width: 16px; height: 16px; " class="item viewSource">view source</A><A href="http://codeofrob.com/#printSource" title="print" style="width: 16px; height: 16px; " class="item printSource">print</A><A href="http://codeofrob.com/#about" title="?" style="width: 16px; height: 16px; " class="item about">?</A></DIV></DIV><DIV class="lines"><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>01</CODE></TD><TD class="content"><CODE class="keyword">public</CODE> <CODE class="keyword">class</CODE> <CODE class="plain">ThemedViewEngine : WebFormViewEngine</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>02</CODE></TD><TD class="content"><CODE class="plain">{</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>03</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="keyword">public</CODE> <CODE class="keyword">override</CODE> <CODE class="plain">ViewEngineResult FindView(ControllerContext controllerContext, </CODE><CODE class="keyword">string</CODE> <CODE class="plain">viewName, </CODE><CODE class="keyword">string</CODE> <CODE class="plain">masterName, </CODE><CODE class="keyword">bool</CODE> <CODE class="plain">useCache)</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>04</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="plain">{</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>05</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="keyword">if</CODE> <CODE class="plain">(</CODE><CODE class="keyword">string</CODE><CODE class="plain">.IsNullOrEmpty(masterName))</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>06</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="plain">{</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>07</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="plain">masterName = </CODE><CODE class="string">"MasterOne"</CODE><CODE class="plain">;</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>08</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="plain">}</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>09</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="keyword">return</CODE> <CODE class="keyword">base</CODE><CODE class="plain">.FindView(controllerContext, viewName, masterName, useCache);</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>10</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="plain">}</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>11</CODE></TD><TD class="content"><CODE class="plain">}</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV>
</FONT>
<P><FONT face="Arial">This is registered in place of the built in view engine like so:</FONT></P>
<FONT face="Arial">
<DIV id="highlighter_366717" class="syntaxhighlighter  "><DIV class="bar"><DIV class="toolbar"><A href="http://codeofrob.com/#viewSource" title="view source" style="width: 16px; height: 16px; " class="item viewSource">view source</A><A href="http://codeofrob.com/#printSource" title="print" style="width: 16px; height: 16px; " class="item printSource">print</A><A href="http://codeofrob.com/#about" title="?" style="width: 16px; height: 16px; " class="item about">?</A></DIV></DIV><DIV class="lines"><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>1</CODE></TD><TD class="content"><CODE class="plain">ViewEngines.Engines.Clear();</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>2</CODE></TD><TD class="content"><CODE class="plain">ViewEngines.Engines.Add(</CODE><CODE class="keyword">new</CODE> <CODE class="plain">ThemedViewEngine());</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV>
</FONT>
<P><FONT face="Arial">Now let's take a look at that code - passed in to the method we're overriding (FindView) is a string called masterName.&nbsp; This is where that string ends up if you use either of the two previous two methods to specify the master page.</FONT></P>
<P><FONT face="Arial">It follows on therefore that just like the last example you can do a check here to see if a master page has already been specified by the previous two methods, and specify one if one has not been set already.</FONT></P>
<H5>ViewPage - OnPreInit</H5>
<P><FONT face="Arial">All of the above methods completely ignore the master page directive set in the view itself - which is in my opinion a little bit bonkers.</FONT></P>
<P><FONT face="Arial">By specifying a master page in the ASPX view, you allow the compiler to verify that the right ContentPlaceHolders are overridden&nbsp; and therefore if you enable compilation of your views you get a check that your view are valid.</FONT></P>
<P><FONT face="Arial">Consider for&nbsp; example the site that has a number of base master pages, one of my personal sites for example has three master pages which are used in different circumstances and each of them have different ContentPlaceHolders because they're for use in completely different functional situations.</FONT></P>
<P><FONT face="Arial">The application is probably unaware of these directives (and indeed should be probably be de-coupled from such concerns as whether a page is using a particular master page or not) and therefore shouldn't be making the decision as to which master page to use!</FONT></P>
<P><FONT face="Arial">ASP.NET MVC is built on top of ASP.NET Forms however, so it turns out that we can ignore the delightfully helpful methods given to us in ASP.NET MVC and skip right back to our original solution of overriding OnPreInit on the base Page class.</FONT></P>
<P><FONT face="Arial">Knowing that ViewPage is inherited from the ASP.NET Forms&nbsp;Page, so we can create ThemableViewPage</FONT></P>
<FONT face="Arial">
<DIV id="highlighter_262954" class="syntaxhighlighter  "><DIV class="bar"><DIV class="toolbar"><A href="http://codeofrob.com/#viewSource" title="view source" style="width: 16px; height: 16px; " class="item viewSource">view source</A><A href="http://codeofrob.com/#printSource" title="print" style="width: 16px; height: 16px; " class="item printSource">print</A><A href="http://codeofrob.com/#about" title="?" style="width: 16px; height: 16px; " class="item about">?</A></DIV></DIV><DIV class="lines"><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>01</CODE></TD><TD class="content"><CODE class="keyword">public</CODE> <CODE class="keyword">class</CODE> <CODE class="plain">ThemedViewPage&lt;T&gt; : ViewPage&lt;T&gt; where T : </CODE><CODE class="keyword">class</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>02</CODE></TD><TD class="content"><CODE class="plain">{</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>03</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="keyword">protected</CODE> <CODE class="keyword">override</CODE> <CODE class="keyword">void</CODE> <CODE class="plain">OnPreInit(EventArgs e)</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>04</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="plain">{</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>05</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="keyword">if</CODE> <CODE class="plain">(</CODE><CODE class="keyword">this</CODE><CODE class="plain">.MasterPageFile.EndsWith(</CODE><CODE class="string">"MasterOne.Master"</CODE><CODE class="plain">, StringComparison.InvariantCultureIgnoreCase))</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>06</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="plain">{</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>07</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="comments">// TODO: Some logic here to find the right master page based on theme!</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>08</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="keyword">this</CODE><CODE class="plain">.MasterPageFile = </CODE><CODE class="string">"/Views/Shared/MasterThree.Master"</CODE><CODE class="plain">;</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>09</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="plain">}</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>10</CODE></TD><TD class="content">&nbsp;</TD></TR></TBODY></TABLE></DIV><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>11</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="keyword">base</CODE><CODE class="plain">.OnPreInit(e);</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>12</CODE></TD><TD class="content"><CODE class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</CODE><CODE class="plain">}</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>13</CODE></TD><TD class="content"><CODE class="plain">}</CODE></TD></TR></TBODY></TABLE></DIV><DIV class="line alt2"><TABLE><TBODY><TR><TD class="number"><CODE>14</CODE></TD><TD class="content">&nbsp;</TD></TR></TBODY></TABLE></DIV><DIV class="line alt1"><TABLE><TBODY><TR><TD class="number"><CODE>15</CODE></TD><TD class="content"><CODE class="keyword">public</CODE> <CODE class="keyword">class</CODE> <CODE class="plain">ThemedViewPage : ThemedViewPage&lt;Object&gt; { }</CODE></TD></TR></TBODY></TABLE></DIV></DIV></DIV>
</FONT>
<P><FONT face="Arial">Note: I create a generic version and a non generic version so we can use it on non strong-typed pages (Some people use these, I don't know why!)</FONT></P>
<P><FONT face="Arial">We can use the same theme code we used in the original example to solve the problem - and best of all, it is still compatible with the previous three methods - so if a different master page is specified by either an Action, a Controller or the ViewEngine this logic will still work.</FONT></P>
<P><FONT face="Arial">The only caveats that I can see are that this method is quite dependent on the default WebFormView implementation, and that every view needs to be set up to inherit from this custom ViewPage .</FONT></P>
<H5>Summary</H5>
<P><FONT face="Arial"><FONT face="Arial">Switching between master pages is still a bit of a fuzzy topic, and the options given to us in ASP.NET MVC are a bit inadequate. There is still the question as to whether we should be attempting to do this at all given how powerful CSS is - but if you really need to, this blog entry should give you a helpful pointer in the right direction.</FONT></FONT></P>
<P>In the projects&nbsp;I own technically where this sort of functionality is going to be requested, I'll be sticking to the OnPreInit method until something better comes up.</P>
<P><FONT face="Arial"><FONT face="Arial"></FONT></FONT></P><FONT face="Arial"><FONT face="Arial"><HR>
Technorati tags: <A rel="tag" href="http://technorati.com/tags/ASP.NET">ASP.NET</A>, <A rel="tag" href="http://technorati.com/tags/ASP.NET+MVC">ASP.NET MVC</A>, <A rel="tag" href="http://technorati.com/tags/Master+Pages">Master Pages</A>, <A rel="tag" href="http://technorati.com/tags/Themes">Themes</A></FONT></FONT><P></P>
</FONT>
			
			<P class="postfoot">		
				posted @ <A href="http://codeofrob.com/archive/2009/11/01/dynamically-switching-between-master-pages-in-asp.net-mvc.aspx" title="Permanent link to this post">Sunday, November 01, 2009 6:44 PM</A> | <A href="http://codeofrob.com/archive/2009/11/01/dynamically-switching-between-master-pages-in-asp.net-mvc.aspx#feedback" title="comments, pingbacks, trackbacks" class="comments">Feedback (1)</A>
			</P>
		</DIV>
	

	


				
		
<DIV id="footer" class="post">
	<P>Copyright © Rob Ashton</P>
	<P class="leafy">Design by Rob Ashton, Based On A Design By <A href="http://www.bartosz.co.nr/" title="Bartosz">Bartosz Brzezinski</A></P>
</DIV>
<SCRIPT type="text/javascript">

 $(document).ready(
    function() {
     SyntaxHighlighter.ClipboardSwf = '/highlighter/scripts/clipboard.swf';
      SyntaxHighlighter.highlight();
    });
</SCRIPT>
	</FONT></FONT></FONT></FONT></FONT></DIV><FONT face="Arial"><FONT face="Arial"><FONT face="Arial"><FONT face="Arial"><FONT face="Arial">
	<DIV style="clear:both;"></DIV>
</FONT></FONT></FONT></FONT></FONT></DIV><FONT face="Arial"><FONT face="Arial"><FONT face="Arial"><FONT face="Arial"><FONT face="Arial">

<!--
Original site design by Bartosz (http://www.bartosz.co.nr/) site no longer functional.
Adapted by Subtext team + modified by Rob Ashton to be a lil bit different
//-->
		

<SCRIPT type="text/javascript">
//<![CDATA[
Sys.Application.initialize();
Sys.Application.add_init(function() {
    $create(Sys.UI._UpdateProgress, {"associatedUpdatePanelId":null,"displayAfter":500,"dynamicLayout":true}, null, null, $get("Search_searchProgress"));
});
//]]>
</SCRIPT>
</FONT></FONT></FONT></FONT></FONT></FORM><FONT face="Arial"><FONT face="Arial"><FONT face="Arial"><FONT face="Arial"><FONT face="Arial">
	<SCRIPT type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</SCRIPT><SCRIPT src="./Rob Ashton_files/ga.js" type="text/javascript"></SCRIPT>
<SCRIPT type="text/javascript">
try {
var pageTracker = _gat._getTracker("UA-11207442-1");
pageTracker._setDomainName(".codeofrob.com");
pageTracker._trackPageview();
} catch(err) {}</SCRIPT>
	

</FONT></FONT></FONT></FONT></FONT></BODY></HTML>