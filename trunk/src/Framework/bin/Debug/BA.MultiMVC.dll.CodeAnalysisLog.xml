<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="c:\program files\microsoft visual studio 9.0\team tools\static analysis tools\fxcop\Xml\CodeAnalysisReport.xsl"?>
<FxCopReport Version="1.36">
 <Namespaces>
  <Namespace Name="BA.MultiMVC.Core">
   <Messages>
    <Message Id="MVC" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2010-02-22 20:34:26Z" FixCategory="Breaking">
     <Issue Name="Namespace" Certainty="85" Level="Error">Correct the casing of 'MVC' in namespace name 'BA.MultiMVC.Core' by changing it to 'Mvc'.</Issue>
    </Message>
    <Message Id="Multi" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-02-22 20:34:26Z" FixCategory="Breaking">
     <Issue Name="Namespace" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Multi' in namespace name 'BA.MultiMVC.Core'.</Issue>
    </Message>
   </Messages>
  </Namespace>
  <Namespace Name="BA.MultiMVC.Helpers">
   <Messages>
    <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Status="Active" Created="2010-02-22 20:34:26Z" FixCategory="Breaking">
     <Issue Certainty="50" Level="Warning">Consider merging the types defined in 'BA.MultiMVC.Helpers' with another namespace.</Issue>
    </Message>
    <Message Id="MVC" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2010-02-22 20:34:26Z" FixCategory="Breaking">
     <Issue Name="Namespace" Certainty="85" Level="Error">Correct the casing of 'MVC' in namespace name 'BA.MultiMVC.Helpers' by changing it to 'Mvc'.</Issue>
    </Message>
    <Message Id="Multi" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-02-22 20:34:26Z" FixCategory="Breaking">
     <Issue Name="Namespace" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Multi' in namespace name 'BA.MultiMVC.Helpers'.</Issue>
    </Message>
   </Messages>
  </Namespace>
  <Namespace Name="BA.MultiMVC.ParametrizedTest">
   <Messages>
    <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Status="Active" Created="2010-02-22 20:34:26Z" FixCategory="Breaking">
     <Issue Certainty="50" Level="Warning">Consider merging the types defined in 'BA.MultiMVC.ParametrizedTest' with another namespace.</Issue>
    </Message>
    <Message Id="MVC" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2010-02-22 20:34:26Z" FixCategory="Breaking">
     <Issue Name="Namespace" Certainty="85" Level="Error">Correct the casing of 'MVC' in namespace name 'BA.MultiMVC.ParametrizedTest' by changing it to 'Mvc'.</Issue>
    </Message>
    <Message Id="Multi" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-02-22 20:34:26Z" FixCategory="Breaking">
     <Issue Name="Namespace" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Multi' in namespace name 'BA.MultiMVC.ParametrizedTest'.</Issue>
    </Message>
    <Message Id="Parametrized" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-02-22 20:34:26Z" FixCategory="Breaking">
     <Issue Name="Namespace" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Parametrized' in namespace name 'BA.MultiMVC.ParametrizedTest'.</Issue>
    </Message>
   </Messages>
  </Namespace>
  <Namespace Name="BA.MultiMVC.Ressources">
   <Messages>
    <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Status="Active" Created="2010-02-22 20:34:26Z" FixCategory="Breaking">
     <Issue Certainty="50" Level="Warning">Consider merging the types defined in 'BA.MultiMVC.Ressources' with another namespace.</Issue>
    </Message>
    <Message Id="MVC" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2010-02-22 20:34:26Z" FixCategory="Breaking">
     <Issue Name="Namespace" Certainty="85" Level="Error">Correct the casing of 'MVC' in namespace name 'BA.MultiMVC.Ressources' by changing it to 'Mvc'.</Issue>
    </Message>
    <Message Id="Multi" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-02-22 20:34:26Z" FixCategory="Breaking">
     <Issue Name="Namespace" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Multi' in namespace name 'BA.MultiMVC.Ressources'.</Issue>
    </Message>
    <Message Id="Ressources" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-02-22 20:34:26Z" FixCategory="Breaking">
     <Issue Name="Namespace" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Ressources' in namespace name 'BA.MultiMVC.Ressources'.</Issue>
    </Message>
   </Messages>
  </Namespace>
  <Namespace Name="BA.MVC.MultiTenant.Core">
   <Messages>
    <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Status="Active" Created="2010-02-22 20:34:26Z" FixCategory="Breaking">
     <Issue Certainty="50" Level="Warning">Consider merging the types defined in 'BA.MVC.MultiTenant.Core' with another namespace.</Issue>
    </Message>
    <Message Id="MVC" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2010-02-22 20:34:26Z" FixCategory="Breaking">
     <Issue Name="Namespace" Certainty="85" Level="Error">Correct the casing of 'MVC' in namespace name 'BA.MVC.MultiTenant.Core' by changing it to 'Mvc'.</Issue>
    </Message>
    <Message Id="Multi" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-02-22 20:34:26Z" FixCategory="Breaking">
     <Issue Name="Namespace" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Multi' in namespace name 'BA.MVC.MultiTenant.Core'.</Issue>
    </Message>
   </Messages>
  </Namespace>
 </Namespaces>
 <Targets>
  <Target Name="C:\Dev\MultiMVC\multimvc\src\Framework\bin\Debug\BA.MultiMVC.dll">
   <Modules>
    <Module Name="ba.multimvc.dll">
     <Messages>
      <Message TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210" Status="Active" Created="2010-02-22 20:34:26Z" FixCategory="NonBreaking">
       <Issue Name="NoStrongName" Certainty="95" Level="CriticalError">Sign 'BA.MultiMVC.dll' with a strong name key.</Issue>
      </Message>
      <Message Id="MVC" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2010-02-22 20:34:26Z" FixCategory="Breaking">
       <Issue Name="Assembly" Certainty="85" Level="Error">Correct the casing of 'MVC' in assembly name 'BA.MultiMVC.dll' by changing it to 'Mvc'.</Issue>
      </Message>
      <Message Id="Multi" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-02-22 20:34:26Z" FixCategory="Breaking">
       <Issue Name="Assembly" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Multi' in assembly name 'BA.MultiMVC.dll'.</Issue>
      </Message>
      <Message TypeName="MarkAssembliesWithClsCompliant" Category="Microsoft.Design" CheckId="CA1014" Status="Active" Created="2010-02-22 20:34:26Z" FixCategory="NonBreaking">
       <Issue Certainty="95" Level="Error">Mark 'BA.MultiMVC.dll' with CLSCompliant(true) because it exposes externally visible types.</Issue>
      </Message>
     </Messages>
     <Namespaces>
      <Namespace Name="BA.MultiMVC.Core">
       <Types>
        <Type Name="BaseController" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#AddModelErrorsToForm(System.Collections.Specialized.NameValueCollection,Castle.Components.Validator.ErrorSummary)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="errorsummary" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-02-22 20:34:26Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Dev\MultiMVC\multimvc\src\Framework\Core" File="BaseController.cs" Line="20">In method 'BaseController.AddModelErrorsToForm(NameValueCollection, ErrorSummary)', correct the spelling of 'errorsummary' in parameter name 'errorsummary' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Configurator`1" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Configurator" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-02-22 20:34:26Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Configurator' in type name 'Configurator&lt;T&gt;'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#InjectDomainFactory(System.String,!0)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="ex" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2010-02-22 20:34:26Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Dev\MultiMVC\multimvc\src\Framework\Core" File="Configurator.cs" Line="45">'Configurator&lt;T&gt;.InjectDomainFactory(string, T)' declares a variable, 'ex', of type 'StructureMapException', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#InjectDomainFactoryNamedInstanceIntoSubject(System.String,!0)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareStaticMembersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1000" Status="Active" Created="2010-02-22 20:34:26Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="C:\Dev\MultiMVC\multimvc\src\Framework\Core" File="Configurator.cs" Line="10">Remove 'Configurator&lt;T&gt;.InjectDomainFactoryNamedInstanceIntoSubject(string, T)' from 'Configurator&lt;T&gt;' or make it an instance member.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#InjectNamedInstanceOfRepositoriesAndServicesIntoSubject(BA.MVC.MultiTenant.Core.TenantContext,!0)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareStaticMembersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1000" Status="Active" Created="2010-02-22 20:34:26Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="C:\Dev\MultiMVC\multimvc\src\Framework\Core" File="Configurator.cs" Line="15">Remove 'Configurator&lt;T&gt;.InjectNamedInstanceOfRepositoriesAndServicesIntoSubject(TenantContext, T)' from 'Configurator&lt;T&gt;' or make it an instance member.</Issue>
            </Message>
            <Message Id="System.String.IndexOf(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2010-02-22 20:34:26Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Dev\MultiMVC\multimvc\src\Framework\Core" File="Configurator.cs" Line="19">'Configurator&lt;T&gt;.InjectNamedInstanceOfRepositoriesAndServicesIntoSubject(TenantContext, T)' makes a call to 'string.IndexOf(string)' that does not explicitly provide a StringComparison. This should be replaced with a call to 'string.IndexOf(string, StringComparison)'.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\Dev\MultiMVC\multimvc\src\Framework\Core" File="Configurator.cs" Line="23">'Configurator&lt;T&gt;.InjectNamedInstanceOfRepositoriesAndServicesIntoSubject(TenantContext, T)' makes a call to 'string.IndexOf(string)' that does not explicitly provide a StringComparison. This should be replaced with a call to 'string.IndexOf(string, StringComparison)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#InjectRepository(BA.MVC.MultiTenant.Core.TenantContext,!0,System.Reflection.PropertyInfo)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.IndexOf(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2010-02-22 20:34:26Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Dev\MultiMVC\multimvc\src\Framework\Core" File="Configurator.cs" Line="72">'Configurator&lt;T&gt;.InjectRepository(TenantContext, T, PropertyInfo)' makes a call to 'string.IndexOf(string)' that does not explicitly provide a StringComparison. This should be replaced with a call to 'string.IndexOf(string, StringComparison)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#InjectService(BA.MVC.MultiTenant.Core.TenantContext,!0,System.Reflection.PropertyInfo)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.IndexOf(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2010-02-22 20:34:26Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Dev\MultiMVC\multimvc\src\Framework\Core" File="Configurator.cs" Line="98">'Configurator&lt;T&gt;.InjectService(TenantContext, T, PropertyInfo)' makes a call to 'string.IndexOf(string)' that does not explicitly provide a StringComparison. This should be replaced with a call to 'string.IndexOf(string, StringComparison)'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="IModel" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="AvoidEmptyInterfaces" Category="Microsoft.Design" CheckId="CA1040" Status="Active" Created="2010-02-22 20:34:26Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Warning">Define a custom attribute to replace 'IModel'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="IService" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="AvoidEmptyInterfaces" Category="Microsoft.Design" CheckId="CA1040" Status="Active" Created="2010-02-22 20:34:26Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Warning">Define a custom attribute to replace 'IService'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="TenantFactory" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#CreateModel(System.Type)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="T" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2010-02-22 20:34:26Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Dev\MultiMVC\multimvc\src\Framework\Core" File="TenantFactory.cs" Line="77">In member 'TenantFactory.CreateModel(Type)', correct the casing of 'T' in parameter name 'T' by changing it to 't'.</Issue>
            </Message>
            <Message Id="T" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-02-22 20:34:26Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="C:\Dev\MultiMVC\multimvc\src\Framework\Core" File="TenantFactory.cs" Line="77">In method 'TenantFactory.CreateModel(Type)', consider providing a more meaningful name than parameter name 'T'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateModel`1()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="GenericMethodsShouldProvideTypeParameter" Category="Microsoft.Design" CheckId="CA1004" Status="Active" Created="2010-02-22 20:34:26Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning" Path="C:\Dev\MultiMVC\multimvc\src\Framework\Core" File="TenantFactory.cs" Line="72">Consider a design where 'TenantFactory.CreateModel&lt;T&gt;()' doesn't require explicit type parameter 'T' in any call to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateRepository(System.Type)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="T" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2010-02-22 20:34:26Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Dev\MultiMVC\multimvc\src\Framework\Core" File="TenantFactory.cs" Line="27">In member 'TenantFactory.CreateRepository(Type)', correct the casing of 'T' in parameter name 'T' by changing it to 't'.</Issue>
            </Message>
            <Message Id="T" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-02-22 20:34:26Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="C:\Dev\MultiMVC\multimvc\src\Framework\Core" File="TenantFactory.cs" Line="27">In method 'TenantFactory.CreateRepository(Type)', consider providing a more meaningful name than parameter name 'T'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateRepository`1()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="GenericMethodsShouldProvideTypeParameter" Category="Microsoft.Design" CheckId="CA1004" Status="Active" Created="2010-02-22 20:34:26Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning" Path="C:\Dev\MultiMVC\multimvc\src\Framework\Core" File="TenantFactory.cs" Line="22">Consider a design where 'TenantFactory.CreateRepository&lt;T&gt;()' doesn't require explicit type parameter 'T' in any call to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateService(System.Type)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="T" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2010-02-22 20:34:26Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Dev\MultiMVC\multimvc\src\Framework\Core" File="TenantFactory.cs" Line="57">In member 'TenantFactory.CreateService(Type)', correct the casing of 'T' in parameter name 'T' by changing it to 't'.</Issue>
            </Message>
            <Message Id="T" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-02-22 20:34:26Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="C:\Dev\MultiMVC\multimvc\src\Framework\Core" File="TenantFactory.cs" Line="57">In method 'TenantFactory.CreateService(Type)', consider providing a more meaningful name than parameter name 'T'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateService`1()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="GenericMethodsShouldProvideTypeParameter" Category="Microsoft.Design" CheckId="CA1004" Status="Active" Created="2010-02-22 20:34:26Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning" Path="C:\Dev\MultiMVC\multimvc\src\Framework\Core" File="TenantFactory.cs" Line="52">Consider a design where 'TenantFactory.CreateService&lt;T&gt;()' doesn't require explicit type parameter 'T' in any call to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="BA.MultiMVC.Helpers">
       <Types>
        <Type Name="ApplicationHelpers" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053" Status="Active" Created="2010-02-22 20:34:26Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Remove the public constructors from 'ApplicationHelpers'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#ConfigureRoutes(System.Web.Routing.RouteCollection,System.String,System.String,System.String,System.String,System.Boolean)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="IIS" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2010-02-22 20:34:26Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Dev\MultiMVC\multimvc\src\Framework\Helpers" File="ApplicationHelpers.cs" Line="17">In member 'ApplicationHelpers.ConfigureRoutes(RouteCollection, string, string, string, string, bool)', correct the casing of 'IIS' in parameter name 'IIS6CompatibilityMode' by changing it to 'iis'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExtensionMethods" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#AddModelErrors(System.Web.Mvc.ModelStateDictionary,Castle.Components.Validator.ErrorSummary,BA.MultiMVC.Ressources.IRessourceDictionary,System.Collections.Specialized.NameValueCollection)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2010-02-22 20:34:26Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Dev\MultiMVC\multimvc\src\Framework\Helpers" File="ExtensionMethods.cs" Line="38">'ExtensionMethods.AddModelErrors(this ModelStateDictionary, ErrorSummary, IRessourceDictionary, NameValueCollection)' creates an exception of type 'ApplicationException', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-02-22 20:34:26Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="C:\Dev\MultiMVC\multimvc\src\Framework\Helpers" File="ExtensionMethods.cs" Line="38">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExtensionMethods.AddModelErrors(this ModelStateDictionary, ErrorSummary, IRessourceDictionary, NameValueCollection)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetLanguage(System.Web.Routing.RequestContext,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2010-02-22 20:34:26Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="C:\Dev\MultiMVC\multimvc\src\Framework\Helpers" File="ExtensionMethods.cs" Line="61">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ExtensionMethods.GetLanguage(this RequestContext, string)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ToCamelCased(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="s" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-02-22 20:34:26Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="C:\Dev\MultiMVC\multimvc\src\Framework\Helpers" File="ExtensionMethods.cs" Line="75">In method 'ExtensionMethods.ToCamelCased(this string)', consider providing a more meaningful name than parameter name 's'.</Issue>
            </Message>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2010-02-22 20:34:26Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="C:\Dev\MultiMVC\multimvc\src\Framework\Helpers" File="ExtensionMethods.cs" Line="76">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ExtensionMethods.ToCamelCased(this string)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.ToUpper" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2010-02-22 20:34:26Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="C:\Dev\MultiMVC\multimvc\src\Framework\Helpers" File="ExtensionMethods.cs" Line="78">Because the behavior of 'string.ToUpper()' could vary based on the current user's locale settings, replace this call in 'ExtensionMethods.ToCamelCased(this string)' with a call to 'string.ToUpper(CultureInfo)'. If the result of 'string.ToUpper(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="BA.MultiMVC.ParametrizedTest">
       <Types>
        <Type Name="TenantFactoryTest" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#CreateServiceAssertRepositoryIsInstanceOfType(System.Type,System.Type)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.IndexOf(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2010-02-22 20:34:26Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Dev\MultiMVC\multimvc\src\Framework\ParametrizedTest" File="TenantFactoryTest.cs" Line="68">'TenantFactoryTest.CreateServiceAssertRepositoryIsInstanceOfType(Type, Type)' makes a call to 'string.IndexOf(string)' that does not explicitly provide a StringComparison. This should be replaced with a call to 'string.IndexOf(string, StringComparison)'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="BA.MultiMVC.Ressources">
       <Types>
        <Type Name="IRessourceDictionary" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Ressource" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-02-22 20:34:26Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Ressource' in type name 'IRessourceDictionary'.</Issue>
          </Message>
          <Message TypeName="IdentifiersShouldNotHaveIncorrectSuffix" Category="Microsoft.Naming" CheckId="CA1711" Status="Active" Created="2010-02-22 20:34:26Z" FixCategory="Breaking">
           <Issue Name="TypeNoAlternate" Certainty="95" Level="CriticalError">Rename type name 'IRessourceDictionary' so that it does not end in 'Dictionary'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#ToSelectListItemList(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="p" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-02-22 20:34:26Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In method 'IRessourceDictionary.ToSelectListItemList(string)', consider providing a more meaningful name than parameter name 'p'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="IRessourceProvider" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Ressource" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-02-22 20:34:26Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Ressource' in type name 'IRessourceProvider'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="RessourceDictionary" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Ressource" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-02-22 20:34:26Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Ressource' in type name 'RessourceDictionary'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#ToSelectListItemList(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2010-02-22 20:34:26Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">In member 'RessourceDictionary.ToSelectListItemList(string)', change parameter name 'selectedValue' to 'p' in order to match the identifier as it has been declared in 'IRessourceDictionary.ToSelectListItemList(string)'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="BA.MVC.MultiTenant.Core">
       <Types>
        <Type Name="TenantContext" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#ConnectionString" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertyNamesShouldNotMatchGetMethods" Category="Microsoft.Naming" CheckId="CA1721" Status="Active" Created="2010-02-22 20:34:26Z" FixCategory="NonBreaking">
             <Issue Name="SameType" Certainty="95" Level="Error" Path="C:\Dev\MultiMVC\multimvc\src\Framework\Core" File="TenantContext.cs" Line="24">The property name 'TenantContext.ConnectionString' is confusing given the existence of method 'TenantContext.GetConnectionString()'. Rename or remove one of these members.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetConnectionString()" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2010-02-22 20:34:26Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Dev\MultiMVC\multimvc\src\Framework\Core" File="TenantContext.cs" Line="60">'TenantContext.GetConnectionString()' creates an exception of type 'ApplicationException', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2010-02-22 20:34:26Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning" Path="C:\Dev\MultiMVC\multimvc\src\Framework\Core" File="TenantContext.cs" Line="49">Change 'TenantContext.GetConnectionString()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetRessources()" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="Ressources" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-02-22 20:34:26Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="C:\Dev\MultiMVC\multimvc\src\Framework\Core" File="TenantContext.cs" Line="65">Correct the spelling of 'Ressources' in member name 'TenantContext.GetRessources()' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2010-02-22 20:34:26Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning" Path="C:\Dev\MultiMVC\multimvc\src\Framework\Core" File="TenantContext.cs" Line="65">Change 'TenantContext.GetRessources()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Ressources" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Ressources" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-02-22 20:34:26Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="C:\Dev\MultiMVC\multimvc\src\Framework\Core" File="TenantContext.cs" Line="37">Correct the spelling of 'Ressources' in member name 'TenantContext.Ressources' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="PropertyNamesShouldNotMatchGetMethods" Category="Microsoft.Naming" CheckId="CA1721" Status="Active" Created="2010-02-22 20:34:26Z" FixCategory="NonBreaking">
             <Issue Name="SameType" Certainty="95" Level="Error" Path="C:\Dev\MultiMVC\multimvc\src\Framework\Core" File="TenantContext.cs" Line="37">The property name 'TenantContext.Ressources' is confusing given the existence of method 'TenantContext.GetRessources()'. Rename or remove one of these members.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
 </Targets>
 <Rules>
  <Rule TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210">
   <Name>Assemblies should have valid strong names</Name>
   <Description>Either the assembly has no strong name, an invalid one, or the strong name is valid only because of the computer configuration. The assembly should not be deployed in this state. The most common causes of this are: 1) The assembly's contents were modified after it was signed. 2) The signing process failed. 3) The assembly was delay-signed. 4) A registry key existed that allowed the check to pass (where it would not have otherwise).</Description>
   <Resolution Name="NoStrongName">Sign {0} with a strong name key.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/library/ms182127(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="DesignRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidEmptyInterfaces" Category="Microsoft.Design" CheckId="CA1040">
   <Name>Avoid empty interfaces</Name>
   <Description>Interfaces are meant to contain members that specify a set of behaviors. To mark or label a class, use an attribute instead of an empty interface.</Description>
   <Resolution Name="Default">Define a custom attribute to replace {0}.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/library/ms182128(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Warning</MessageLevel>
   <File Name="DesignRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020">
   <Name>Avoid namespaces with few types</Name>
   <Description>A namespace should generally have more than five types.</Description>
   <Resolution Name="Default">Consider merging the types defined in '{0}' with another namespace.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/library/ms182130(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="50">Warning</MessageLevel>
   <File Name="DesignRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotDeclareStaticMembersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1000">
   <Name>Do not declare static members on generic types</Name>
   <Description>The syntax for calling static members on generic types is complex as the type parameter has to be specified for each call.</Description>
   <Resolution Name="Default">Remove {0} from {1} or make it an instance member.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/library/ms182139(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="DesignRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201">
   <Name>Do not raise reserved exception types</Name>
   <Description>User code should not create and raise exceptions of certain types that are reserved by the runtime or which are of a too general exception type. Exception types that are too general include Exception, SystemException, and ApplicationException. Exception types that are reserved by the runtime include ThreadAbortException, OutOfMemoryException, ExecutionEngineException, and IndexOutOfRangeException.</Description>
   <Resolution Name="TooGeneric">{0} creates an exception of type {1}, an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/library/ms182338(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="UsageRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="GenericMethodsShouldProvideTypeParameter" Category="Microsoft.Design" CheckId="CA1004">
   <Name>Generic methods should provide type parameter</Name>
   <Description>Methods where the type parameter cannot be inferred from the parameters and therefore has to be defined in the method call are too difficult to understand. Methods with a formal parameter typed as the generic method type parameter support inference. Methods with no formal parameter typed as the generic method type parameter don't support inference.</Description>
   <Resolution Name="Default">Consider a design where {0} doesn't require explicit type parameter {1} in any call to it.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/library/ms182150(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="DesignRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709">
   <Name>Identifiers should be cased correctly</Name>
   <Description>Type, namespace, and member identifiers are Pascal-cased. Parameter identifiers are camel-cased. Two letter acronyms within these identifiers should be upper-cased, for example, use System.IO instead of System.Io. Acronyms of three or more letters should be Pascal-cased, for example, use System.Xml instead of System.XML. The pascal-casing convention capitalizes the first letter of each word, as in BackColor. The camel-casing convention formats the first letter of the first word in lowercase and capitalizes the first letter of all subsequent words, as in backgroundColor. Although it may be common practice for some two letter acronyms to not be fully capitalized, violations of this rule should not be excluded for this reason. For example, 'DbConnection', is common but incorrect; use DBConnection. A violation of this rule might be required for compatibility with existing, non-managed symbol schemes. In general, however, these symbols should not be visible outside the assembly that uses them.</Description>
   <Resolution Name="Assembly">Correct the casing of '{0}' in assembly name {1} by changing it to '{2}'.</Resolution>
   <Resolution Name="MemberParameter">In member {0}, correct the casing of '{1}' in parameter name {2} by changing it to '{3}'.</Resolution>
   <Resolution Name="Namespace">Correct the casing of '{0}' in namespace name '{1}' by changing it to '{2}'.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/library/ms182240(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="85">Error</MessageLevel>
   <File Name="NamingRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704">
   <Name>Identifiers should be spelled correctly</Name>
   <Description>The individual words that make up an identifier should not be abbreviated and should be spelled correctly. If this rule generates a false positive on a term that should be recognized, add the word to the FxCop custom dictionary.</Description>
   <Resolution Name="Assembly">Correct the spelling of '{0}' in assembly name {1}.</Resolution>
   <Resolution Name="Member">Correct the spelling of '{0}' in member name {1} or remove it entirely if it represents any sort of Hungarian notation.</Resolution>
   <Resolution Name="MemberParameter">In method {0}, correct the spelling of '{1}' in parameter name {2} or remove it entirely if it represents any sort of Hungarian notation.</Resolution>
   <Resolution Name="MemberParameterMoreMeaningfulName">In method {0}, consider providing a more meaningful name than parameter name {1}.</Resolution>
   <Resolution Name="Namespace">Correct the spelling of '{0}' in namespace name '{1}'.</Resolution>
   <Resolution Name="Type">Correct the spelling of '{0}' in type name {1}.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/library/bb264492(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">CriticalWarning</MessageLevel>
   <File Name="NamingRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldNotHaveIncorrectSuffix" Category="Microsoft.Naming" CheckId="CA1711">
   <Name>Identifiers should not have incorrect suffix</Name>
   <Description>Types that do not extend certain base types should not use reserved name suffixes. Types and members should not use 'Ex' or 'New' to distinguish them from an earlier version of the same API, instead, use a numeric suffix such as '2' or provide a more meaningful suffix. Concrete type implementations and members should not end 'Impl'. Members instead, should either consider using the suggested alternate 'Core' in replacement of 'Impl' or avoid any suffix at all.</Description>
   <Resolution Name="TypeNoAlternate">Rename type name {0} so that it does not end in '{1}'.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/library/ms182247(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="NamingRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="MarkAssembliesWithClsCompliant" Category="Microsoft.Design" CheckId="CA1014">
   <Name>Mark assemblies with CLSCompliantAttribute</Name>
   <Description>Assemblies should explicitly state their CLS compliance using the CLSCompliant attribute. An assembly without this attribute is not CLS-compliant. Assemblies, modules, and types can be CLS-compliant even if some parts of the assembly, module, or type are not CLS-compliant. The following rules apply: 1) If the element is marked CLSCompliant, any noncompliant members must have the CLSCompliant attribute present with its argument set to false. 2) A comparable CLS-compliant alternative member must be supplied for each member that is not CLS-compliant.</Description>
   <Resolution Name="Default">Mark {0} with CLSCompliant(true) because it exposes externally visible types.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/library/ms182156(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="DesignRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725">
   <Name>Parameter names should match base declaration</Name>
   <Description>For usability reasons, parameter names in overridden methods should match those of the base declaration.</Description>
   <Resolution Name="Default">In member {0}, change parameter name {1} to {2} in order to match the identifier as it has been declared in {3}.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/library/ms182251(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="NamingRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="PropertyNamesShouldNotMatchGetMethods" Category="Microsoft.Naming" CheckId="CA1721">
   <Name>Property names should not match get methods</Name>
   <Description>A Get method was found with the same name as a property. Get methods and properties should have names that clearly distinguish their function. See the design guidelines for information regarding choosing properties over methods.</Description>
   <Resolution Name="SameType">The property name {0} is confusing given the existence of method {1}. Rename or remove one of these members.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/library/ms182253(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="NamingRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804">
   <Name>Remove unused locals</Name>
   <Description>Remove locals that are not used or are only assigned to in method implementations.</Description>
   <Resolution Name="Default">{0} declares a variable, {1}, of type {2}, which is never used or is only assigned to. Use this variable or remove it.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/library/ms182278(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="PerformanceRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304">
   <Name>Specify CultureInfo</Name>
   <Description>If an overload exists that takes a CultureInfo argument, it should always be called in favor of an overload that does not. The CultureInfo type contains culture-specific information required for performing numeric and string operations, such as casing, formatting, and string comparisons. In scenarios where conversion and parsing behavior should never change between cultures, specify CultureInfo.InvariantCulture, otherwise, specify CultureInfo.CurrentCulture.</Description>
   <Resolution Name="Default">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/library/ms182189(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="GlobalizationRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305">
   <Name>Specify IFormatProvider</Name>
   <Description>If an overload exists that takes an IFormatProvider argument, it should always be called in favor of an overload that does not. Some methods in the runtime convert a value to or from a string representation and take a string parameter that contains one or more characters, called format specifiers, which indicate how the value is to be converted. If the meaning of the format specifier varies by culture, a formatting object supplies the actual characters used in the string representation. In scenarios where sorting and comparison behavior should never change between cultures, specify CultureInfo.InvariantCulture, otherwise, specify CultureInfo.CurrentCulture.</Description>
   <Resolution Name="Default">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/library/ms182190(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="GlobalizationRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307">
   <Name>Specify StringComparison</Name>
   <Description>If an overload exists that takes a StringComparison argument, it should always be called in favor of an overload that does not.</Description>
   <Resolution Name="Default">{0} makes a call to {1} that does not explicitly provide a StringComparison. This should be replaced with a call to {2}.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/library/bb386080(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="GlobalizationRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053">
   <Name>Static holder types should not have constructors</Name>
   <Description>Instances of types that define only static members do not need to be created. Many compilers will automatically add a public default constructor if no constructor is specified. To prevent this, adding an empty private constructor may be required.</Description>
   <Resolution Name="Default">Remove the public constructors from {0}.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/library/ms182169(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="DesignRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024">
   <Name>Use properties where appropriate</Name>
   <Description>Properties should be used instead of Get/Set methods in most situations. Methods are preferable to properties in the following situations: the operation is a conversion, is expensive or has an observable side-effect; the order of execution is important; calling the member twice in succession creates different results; a member is static but returns a mutable value; or the member returns an array.</Description>
   <Resolution Name="Default">Change {0} to a property if appropriate.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/library/ms182181(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="DesignRules.dll" Version="9.0.0.0" />
  </Rule>
 </Rules>
 <Localized>
  <String Key="Category">Category</String>
  <String Key="Certainty">Certainty</String>
  <String Key="CollapseAll">Collapse All</String>
  <String Key="CheckId">Check Id</String>
  <String Key="Error">Error</String>
  <String Key="Errors">error(s)</String>
  <String Key="ExpandAll">Expand All</String>
  <String Key="Help">Help</String>
  <String Key="Line">Line</String>
  <String Key="Messages">message(s)</String>
  <String Key="LocationNotStoredInPdb">[Location not stored in Pdb]</String>
  <String Key="Project">Project</String>
  <String Key="Resolution">Resolution</String>
  <String Key="Rule">Rule</String>
  <String Key="RuleFile">Rule File</String>
  <String Key="RuleDescription">Rule Description</String>
  <String Key="Source">Source</String>
  <String Key="Status">Status</String>
  <String Key="Target">Target</String>
  <String Key="Warning">Warning</String>
  <String Key="Warnings">warning(s)</String>
  <String Key="ReportTitle">Code Analysis Report</String>
 </Localized>
</FxCopReport>
